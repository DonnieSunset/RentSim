@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using RentSimS.Data
@inject WeatherForecastService ForecastService
@inject IHttpClientFactory ClientFactory

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@savings</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string? savings;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        //var client = ;
        //var response = await GetSavingPhaseResultAsync();

        savings = await GetSavingPhaseResultAsync();
    }


    private async Task<string> GetSavingPhaseResultAsync()
    {
        var ub = new UriBuilder("https://localhost:44324");
        ub.Path = "SavingPhase/Calculate";
        ub.Query = $"?ageCurrent={42}" +
            $"&ageStopWork={63}" +
            $"&startCapital={1000}" +
            $"&growthRate={3}" +
            $"&saveAmountPerMonth={100}";

        string ss = ub.ToString();

        using (var httpClient = ClientFactory.CreateClient("SavingPhaseService"))
        {

            HttpResponseMessage response = await httpClient.GetAsync(ub.ToString());
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Http response error: {response.Content}.");
            }

            //var content = response.Content.
            //var stringResponse = await response.Content.ReadFromJsonAsync<string?>();
            var stringResponse = await response.Content.ReadAsStringAsync();

            if (stringResponse == null)
            {
                throw new Exception($"{nameof(stringResponse)} is null.");
            }
            Console.WriteLine("SH: " + stringResponse);
            //var result = Decimal.Parse(stringResponse);
            var result = stringResponse;
            return result;
        }
    }
}
