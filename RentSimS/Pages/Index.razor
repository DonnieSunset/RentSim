@page "/"
@using System.Globalization;
@using Domain;
@using Finance.Results;
@using SavingPhaseService.Contracts;
@using Protocol;
@using RentSimS.Clients;
@using System.Text.Json;
@inject IHttpClientFactory ClientFactory;
@inject IServiceProvider serviceProvider;


<Divider DividerType="DividerType.TextContent" Text="Ages" />

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Stop Work Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Rent Start Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>

 </Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageCurrent" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@ageStopWork" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageRentStart" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageEnd" onchange="@Recalc" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Savings Phase"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Asset Class:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Initial Savings:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Interest Rate (%):</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Savings:</FieldLabel>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cash" Step="1000" Min=0 onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cashGrowthRate" Step="1" Min=0 onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cashSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metals" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metalsGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metalsSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocks" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocksGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocksSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Total Savings at @ageStopWork:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@result_totalSavings"/> </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Rate from @ageStopWork:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@result_MonthlyRateStopWorkPhase" /> </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Rate from @lifeAssumptions.ageRentStart:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@result_MonthlyRateRentPhase" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Monthly Needs"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Needs at age @lifeAssumptions.ageCurrent:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Needs at age @ageStopWork:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Needs at age @lifeAssumptions.ageRentStart:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Inflation Rate (%):</FieldLabel>
</Field>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Minimum:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.needsCurrentAgeMinimal_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@laterNeedsResult.needsMinimum_AgeStopWork_WithInflation_PerMonth" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@laterNeedsResult.needsMinimum_AgeRentStart_WithInflation_PerMonth" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit TValue="System.Double" ReadOnly="false" @bind-Value="@lifeAssumptions.inflationRate" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Comfort:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.needsCurrentAgeComfort_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@laterNeedsResult.needsComfort_AgeStopWork_WithInflation_PerMonth" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@laterNeedsResult.needsComfort_AgeRentStart_WithInflation_PerMonth" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="State Rent"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Approx. State Rent:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">At age @lifeAssumptions.ageCurrent:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">At age @ageStopWork:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">At age @lifeAssumptions.ageRentStart:</FieldLabel>
</Field>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Gross:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.grossStateRentFromCurrentAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@rentAtStopWork_gross" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.grossStateRentFromRentStartAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.netStateRentFromCurrentAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@rentAtStopWork_net" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.netStateRentFromRentStartAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>


<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <BarChart @ref="barChart" TItem="decimal"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="decimal" />
    </Column>
</Row>

<Row>
    <Column ColumnSize="ColumnSize.Is10">
        <DataGrid TItem="ResultRow"
                  ColumnSize="ColumnSize.Is1"
                  Narrow="true"
                  Responsive="true"
                  Data="@resultRows"
                  Resizable="true"
                  PageSize=100
        >
            <DataGridCommandColumn TItem="ResultRow" />
            <DataGridColumn TItem="ResultRow" Field="age" Caption="Age" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End />
            <DataGridColumn TItem="ResultRow" Field="TotalYearBegin" Caption="Total YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="cashYearBegin" Caption="Cash YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="stocksYearBegin" Caption="Stocks YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="metalsYearBegin" Caption="Metals YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="CashDepositsTotal" Caption="Cash Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="StocksDepositsTotal" Caption="Stocks Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="MetalsDepositsTotal" Caption="Metals Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalDeposits" Caption="Total Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalInterests" Caption="Total Interests" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalTaxes" Caption="Total Taxes" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalYearEnd" Caption="Total YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="cashYearEnd" Caption="Cash YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="stocksYearEnd" Caption="Stocks YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="metalsYearEnd" Caption="Metals YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
        </DataGrid>
    </Column>
</Row>

@code{
    IFinanceMathClient myFinanceMathClient;
    ISavingPhaseClient mySavingPhaseClient;
    IRentPhaseClient myRentPhaseClient;

    LifeAssumptions lifeAssumptions = new();
    int ageStopWork = 63;

    decimal result_totalSavings;
    decimal rentAtStopWork_gross;
    decimal rentAtStopWork_net;

    decimal result_MonthlyRateStopWorkPhase;
    decimal result_MonthlyRateRentPhase;

    //private string Result_MonthlyRateStopWorkPhase
    //{
    //    get
    //    {
    //        //return result_MonthlyRateStopWorkPhase.ToString("0:2C") + " €";
    //        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", result_MonthlyRateStopWorkPhase);
    //    }
    //    set { result_MonthlyRateRentPhase = Decimal.Parse(value); }
    //}
    //private string Result_MonthlyRateRentPhase
    //{
    //    get
    //    {
    //        //return result_MonthlyRateRentPhase.ToString("0:2C") + " €";
    //        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", result_MonthlyRateRentPhase);
    //    }
    //    set { result_MonthlyRateRentPhase = Decimal.Parse(value); }
    //}

    BarChart<decimal>? barChart;
    LineChart<decimal>? lineChart;

    IEnumerable<ResultRow> resultRows;
    LaterNeedsResult laterNeedsResult = new ();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            myFinanceMathClient = serviceProvider.GetService<IFinanceMathClient>();
            mySavingPhaseClient = serviceProvider.GetService<ISavingPhaseClient>();
            myRentPhaseClient = serviceProvider.GetService<IRentPhaseClient>();

            Recalc();         
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    savingPhaseFacade = new SavingPhaseFacade(ClientFactory);
    //    await Recalc();
    //}

    public string BeautifyToCurrenctWith0Decimals(decimal num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }

    private async Task Recalc()
    {
        var protocolWriter = new MemoryProtocolWriter();

        // Saving Phase

        var savingPhaseResult = await mySavingPhaseClient.GetAndLogSavingPhase(
            lifeAssumptions.ageCurrent, ageStopWork,
            lifeAssumptions.cash, lifeAssumptions.cashGrowthRate, lifeAssumptions.cashSaveAmountPerMonth,
            lifeAssumptions.stocks, lifeAssumptions.stocksGrowthRate, lifeAssumptions.stocksSaveAmountPerMonth,
            lifeAssumptions.metals, lifeAssumptions.metalsGrowthRate, lifeAssumptions.metalsSaveAmountPerMonth,
            protocolWriter
        );
        result_totalSavings = savingPhaseResult.SavingsTotal;

        // Later Needs

        decimal blubb1 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.needsCurrentAgeMinimal_perMonth, lifeAssumptions.inflationRate);
        decimal blubb2 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.needsCurrentAgeComfort_perMonth, lifeAssumptions.inflationRate);
        decimal blubb3 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, lifeAssumptions.ageRentStart, lifeAssumptions.needsCurrentAgeMinimal_perMonth, lifeAssumptions.inflationRate);
        decimal blubb4 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, lifeAssumptions.ageRentStart, lifeAssumptions.needsCurrentAgeComfort_perMonth, lifeAssumptions.inflationRate);
        laterNeedsResult = new LaterNeedsResult
        {
            needsMinimum_AgeStopWork_WithInflation_PerMonth = blubb1,
            needsComfort_AgeStopWork_WithInflation_PerMonth = blubb2,
            needsMinimum_AgeRentStart_WithInflation_PerMonth = blubb3,
            needsComfort_AgeRentStart_WithInflation_PerMonth = blubb4,
        };

        // State Rent

        StateRentResult stateRentResult = new()
        {
            assumedStateRent_Net_PerMonth = await myRentPhaseClient.ApproxStateRent(lifeAssumptions.ageCurrent, lifeAssumptions.netStateRentFromCurrentAge_perMonth, lifeAssumptions.ageRentStart, lifeAssumptions.netStateRentFromRentStartAge_perMonth, ageStopWork),
            assumedStateRent_Gross_PerMonth = await myRentPhaseClient.ApproxStateRent(lifeAssumptions.ageCurrent, lifeAssumptions.grossStateRentFromCurrentAge_perMonth, lifeAssumptions.ageRentStart, lifeAssumptions.grossStateRentFromRentStartAge_perMonth, ageStopWork),
        };
        rentAtStopWork_gross = stateRentResult.assumedStateRent_Gross_PerMonth;
        rentAtStopWork_net = stateRentResult.assumedStateRent_Net_PerMonth;

        // Rent Phase

        var rentPhaseResult = await myRentPhaseClient.GetAndLogRentPhase(
            lifeAssumptions.ageRentStart, lifeAssumptions.ageEnd,
            lifeAssumptions.cashGrowthRate, lifeAssumptions.stocksGrowthRate, lifeAssumptions.metalsGrowthRate, 
            savingPhaseResult,
            laterNeedsResult,
            stateRentResult,
            protocolWriter
        );


        // Stop Work Phase

        decimal rentStartAmount = protocolWriter.Protocol
            .Single(x => x.age == lifeAssumptions.ageRentStart)
            .TotalYearBegin;

        var stopWorkPhaseResult = await myFinanceMathClient.RateByNumericalSparkassenformel(
            savingPhaseResult.savingsCash,
            savingPhaseResult.savingsStocks,
            savingPhaseResult.savingsMetals,
            lifeAssumptions.cashGrowthRate,
            lifeAssumptions.stocksGrowthRate,
            lifeAssumptions.metalsGrowthRate,
            rentStartAmount,
            ageStopWork,
            lifeAssumptions.ageRentStart);

        foreach (var entry in stopWorkPhaseResult.Entities)
        {
            if (entry.Age == lifeAssumptions.ageRentStart)
            {
                protocolWriter.LogBalanceYearBegin(entry.Age, entry.YearBegin.Cash, entry.YearBegin.Stocks, entry.YearBegin.Metals);
            }

            protocolWriter.Log(entry.Age, new TransactionDetails { cashDeposit = -entry.Rates.Cash, cashInterests = entry.Zins.Cash });
            protocolWriter.Log(entry.Age, new TransactionDetails { stockDeposit = -entry.Rates.Stocks, stockInterests = entry.Zins.Stocks });
            protocolWriter.Log(entry.Age, new TransactionDetails { metalDeposit = -entry.Rates.Metals, metalInterests = entry.Zins.Metals });
        }
        

        result_MonthlyRateStopWorkPhase = -protocolWriter.Protocol.Single(x => x.age == ageStopWork).TotalDeposits / 12m;
        result_MonthlyRateRentPhase = -protocolWriter.Protocol.Single(x => x.age == lifeAssumptions.ageRentStart).TotalDeposits / 12m;

        // Re-balancing after Stop-Work phase

        var lastStopWorkPhase = protocolWriter.Protocol.Single(x => x.age == lifeAssumptions.ageRentStart - 1);
        var firstRentPhase = protocolWriter.Protocol.Single(x => x.age == lifeAssumptions.ageRentStart);

        var cashDiff = lastStopWorkPhase.cashYearEnd - firstRentPhase.cashYearBegin;
        protocolWriter.Log(lifeAssumptions.ageRentStart - 1, new TransactionDetails { cashDeposit = -cashDiff });

        var stocksDiff = lastStopWorkPhase.stocksYearEnd - firstRentPhase.stocksYearBegin;
        protocolWriter.Log(lifeAssumptions.ageRentStart - 1, new TransactionDetails { stockDeposit = -stocksDiff });

        var metalsDiff = lastStopWorkPhase.metalsYearEnd - firstRentPhase.metalsYearBegin;
        protocolWriter.Log(lifeAssumptions.ageRentStart - 1, new TransactionDetails { metalDeposit = -metalsDiff });


        // validation

        resultRows = protocolWriter.Protocol;

        ResultRowValidator.ValidateAll(resultRows, lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.ageEnd);

        // UI updates

        await DrawBarChart(barChart, protocolWriter.Protocol, lifeAssumptions);
        await DrawLineChart(lineChart, protocolWriter.Protocol, lifeAssumptions);

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }
}