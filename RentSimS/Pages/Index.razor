@page "/"
@using System.Globalization;
@using Domain;
@using Finance.Results;
@using SavingPhaseService.Contracts;
@using Protocol;
@using RentSimS.Clients;
@using System.Text.Json;
@inject IHttpClientFactory ClientFactory;
@inject IServiceProvider serviceProvider;


<Divider DividerType="DividerType.TextContent" Text="Ages" />

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Stop Work Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Rent Start Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>

 </Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageCurrent" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@ageStopWork" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageRentStart" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageEnd" onchange="@Recalc" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Savings Phase"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Asset Class:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Initial Savings:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Interest Rate (%):</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Savings:</FieldLabel>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cash" Step="1000" Min=0 onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cashGrowthRate" Step="1" Min=0 onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cashSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metals" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metalsGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metalsSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocks" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocksGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocksSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Total Savings at @ageStopWork:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@totalSavings"/> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Monthly Needs"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Needs at age @lifeAssumptions.ageCurrent:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Needs at age @ageStopWork:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Needs at age @lifeAssumptions.ageRentStart:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Inflation Rate (%):</FieldLabel>
</Field>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Minimum:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.needsCurrentAgeMinimal_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@needs.needsMinimum_AgeStopWork_WithInflation_PerMonth" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@needs.needsMinimum_AgeRentStart_WithInflation_PerMonth" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit TValue="System.Double" ReadOnly="false" @bind-Value="@lifeAssumptions.inflationRate" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Comfort:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.needsCurrentAgeComfort_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@needs.needsComfort_AgeStopWork_WithInflation_PerMonth" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@needs.needsComfort_AgeRentStart_WithInflation_PerMonth" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="State Rent"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Approx. State Rent:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">At age @lifeAssumptions.ageCurrent:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">At age @ageStopWork:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is1">At age @lifeAssumptions.ageRentStart:</FieldLabel>
</Field>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Gross:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.grossStateRentFromCurrentAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@rentAtStopWork_gross" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.grossStateRentFromRentStartAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.netStateRentFromCurrentAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@rentAtStopWork_net" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.netStateRentFromRentStartAge_perMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>


<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <BarChart @ref="barChart" TItem="decimal"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="decimal" />
    </Column>
</Row>

<Row>
    <Column ColumnSize="ColumnSize.Is10">
        <DataGrid TItem="ResultRow"
                  ColumnSize="ColumnSize.Is1"
                  Narrow="true"
                  Responsive="true"
                  Data="@resultRows"
                  Resizable="true"
                  PageSize=100
        >
            <DataGridCommandColumn TItem="ResultRow" />
            <DataGridColumn TItem="ResultRow" Field="age" Caption="Age" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End />
            <DataGridColumn TItem="ResultRow" Field="TotalYearBegin" Caption="Total YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="cashYearBegin" Caption="Cash YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="stocksYearBegin" Caption="Stocks YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="metalsYearBegin" Caption="Metals YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="CashDepositsTotal" Caption="Cash Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="StocksDepositsTotal" Caption="Stocks Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="MetalsDepositsTotal" Caption="Metals Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalDeposits" Caption="Total Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalInterests" Caption="Total Interests" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalTaxes" Caption="Total Taxes" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="TotalYearEnd" Caption="Total YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="cashYearEnd" Caption="Cash YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="stocksYearEnd" Caption="Stocks YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
            <DataGridColumn TItem="ResultRow" Field="metalsYearEnd" Caption="Metals YearEnd" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" />
        </DataGrid>
    </Column>
</Row>

@code{
    //SavingPhaseClient savingPhaseFacade;
    IFinanceMathClient myFinanceMathClient;
    ISavingPhaseClient mySavingPhaseClient;
    IRentPhaseClient myRentPhaseClient;

    LifeAssumptions lifeAssumptions = new();
    int ageStopWork = 63;

    decimal totalSavings;
    decimal rentAtStopWork_gross;
    decimal rentAtStopWork_net;

    BarChart<decimal>? barChart;
    LineChart<decimal>? lineChart;

    IEnumerable<ResultRow> resultRows;
    LaterNeedsResult needs = new ();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            myFinanceMathClient = serviceProvider.GetService<IFinanceMathClient>();
            mySavingPhaseClient = serviceProvider.GetService<ISavingPhaseClient>();
            myRentPhaseClient = serviceProvider.GetService<IRentPhaseClient>();

            Recalc();         
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    savingPhaseFacade = new SavingPhaseFacade(ClientFactory);
    //    await Recalc();
    //}

    public string BeautifyToCurrenctWith0Decimals(decimal? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }

    private async Task Recalc()
    {
        // Saving Phase

        var totalSavingsCash = await mySavingPhaseClient.GetSavingPhaseResultAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.cash, lifeAssumptions.cashGrowthRate, lifeAssumptions.cashSaveAmountPerMonth);
        var totalSavingsStocks = await mySavingPhaseClient.GetSavingPhaseResultAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.stocks, lifeAssumptions.stocksGrowthRate, lifeAssumptions.stocksSaveAmountPerMonth);
        var totalSavingsMetals = await mySavingPhaseClient.GetSavingPhaseResultAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.metals, lifeAssumptions.metalsGrowthRate, lifeAssumptions.metalsSaveAmountPerMonth);

        totalSavings = totalSavingsCash + totalSavingsMetals + totalSavingsStocks;

        var savingPhaseSimCash = await mySavingPhaseClient.GetSavingPhaseSimulationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.cash, lifeAssumptions.cashGrowthRate, lifeAssumptions.cashSaveAmountPerMonth);
        var savingPhaseSimMetals = await mySavingPhaseClient.GetSavingPhaseSimulationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.metals, lifeAssumptions.metalsGrowthRate, lifeAssumptions.metalsSaveAmountPerMonth);
        var savingPhaseSimStocks = await mySavingPhaseClient.GetSavingPhaseSimulationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.stocks, lifeAssumptions.stocksGrowthRate, lifeAssumptions.stocksSaveAmountPerMonth);

        var protocolWriter = new MemoryProtocolWriter();
        protocolWriter.LogBalanceYearBegin(lifeAssumptions.ageCurrent, lifeAssumptions.cash, lifeAssumptions.stocks, lifeAssumptions.metals);
        for (int age = lifeAssumptions.ageCurrent; age < ageStopWork; age++)
        {

            var cashEntry = savingPhaseSimCash.Entities.Single(x => x.Age == age);
            var metalsEntry = savingPhaseSimMetals.Entities.Single(x => x.Age == age);
            var stocksEntry = savingPhaseSimStocks.Entities.Single(x => x.Age == age);

            protocolWriter.Log(age, new TransactionDetails { cashDeposit = cashEntry.Deposit, cashInterests = cashEntry.Interests });
            protocolWriter.Log(age, new TransactionDetails { stockDeposit = stocksEntry.Deposit, stockInterests = stocksEntry.Interests });
            protocolWriter.Log(age, new TransactionDetails { metalDeposit = metalsEntry.Deposit, metalInterests = metalsEntry.Interests });
        }

        // Later Needs

        decimal blubb1 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.needsCurrentAgeMinimal_perMonth, lifeAssumptions.inflationRate);
        decimal blubb2 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.needsCurrentAgeComfort_perMonth, lifeAssumptions.inflationRate);
        decimal blubb3 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, lifeAssumptions.ageRentStart, lifeAssumptions.needsCurrentAgeMinimal_perMonth, lifeAssumptions.inflationRate);
        decimal blubb4 = await myFinanceMathClient.GetAmountWithInflationAsync(lifeAssumptions.ageCurrent, lifeAssumptions.ageRentStart, lifeAssumptions.needsCurrentAgeComfort_perMonth, lifeAssumptions.inflationRate);
        needs = new LaterNeedsResult
        {
                needsMinimum_AgeStopWork_WithInflation_PerMonth = blubb1,
                needsComfort_AgeStopWork_WithInflation_PerMonth = blubb2,
                needsMinimum_AgeRentStart_WithInflation_PerMonth = blubb3,
                needsComfort_AgeRentStart_WithInflation_PerMonth = blubb4,
        };

        rentAtStopWork_net = await myRentPhaseClient.ApproxStateRent(lifeAssumptions.ageCurrent, lifeAssumptions.netStateRentFromCurrentAge_perMonth, lifeAssumptions.ageRentStart, lifeAssumptions.netStateRentFromRentStartAge_perMonth, ageStopWork);
        rentAtStopWork_gross = await myRentPhaseClient.ApproxStateRent(lifeAssumptions.ageCurrent, lifeAssumptions.grossStateRentFromCurrentAge_perMonth, lifeAssumptions.ageRentStart, lifeAssumptions.grossStateRentFromRentStartAge_perMonth, ageStopWork);

        // Rent Phase

        double factorCash = (double)(totalSavingsCash / totalSavings);
        double factorStocks = (double)(totalSavingsStocks / totalSavings);
        double factorMetals = (double)(totalSavingsMetals / totalSavings);
        decimal rateNeeded = (needs.needsComfort_AgeRentStart_WithInflation_PerMonth - rentAtStopWork_net) * 12;
        var rentPhaseResultString = await myFinanceMathClient.StartCapitalByNumericalSparkassenformel(
            rateNeeded,
            factorCash,
            lifeAssumptions.cashGrowthRate,
            factorStocks,
            lifeAssumptions.stocksGrowthRate,
            factorMetals,
            lifeAssumptions.metalsGrowthRate,
            0,
            lifeAssumptions.ageRentStart,
            lifeAssumptions.ageEnd);

        var rentPhaseResultJson = JsonDocument.Parse(rentPhaseResultString);
        foreach (JsonElement o in rentPhaseResultJson.RootElement.EnumerateArray())
        {
            int age = o.GetProperty("Age").GetInt32();
            decimal yearBegin_cash = o.GetProperty("YearBegin").GetProperty("Cash").GetDecimal();
            decimal yearBegin_stocks = o.GetProperty("YearBegin").GetProperty("Stocks").GetDecimal();
            decimal yearBegin_metals = o.GetProperty("YearBegin").GetProperty("Metals").GetDecimal();
            decimal rate_cash = o.GetProperty("Rates").GetProperty("Cash").GetDecimal();
            decimal rate_stocks = o.GetProperty("Rates").GetProperty("Stocks").GetDecimal();
            decimal rate_metals = o.GetProperty("Rates").GetProperty("Metals").GetDecimal();
            decimal zins_cash = o.GetProperty("Zins").GetProperty("Cash").GetDecimal();
            decimal zins_stocks = o.GetProperty("Zins").GetProperty("Stocks").GetDecimal();
            decimal zins_metals = o.GetProperty("Zins").GetProperty("Metals").GetDecimal();

            // this if is only necessary because we dont have a stopwork phase. Delete it once all phases are integrated in the correct order.
            if (age == lifeAssumptions.ageRentStart)
            {
                protocolWriter.LogBalanceYearBegin(age, yearBegin_cash, yearBegin_stocks, yearBegin_metals);
            }
            protocolWriter.Log(age, new TransactionDetails { cashDeposit = -rate_cash, cashInterests = zins_cash });
            protocolWriter.Log(age, new TransactionDetails { stockDeposit = -rate_stocks, stockInterests = zins_stocks });
            protocolWriter.Log(age, new TransactionDetails { metalDeposit = -rate_metals, metalInterests = zins_metals });
        }

        // Stop Work Phase

        decimal rentStartAmount = protocolWriter.Protocol
            .Single(x => x.age == lifeAssumptions.ageRentStart)
            .TotalYearBegin;

        var stopWorkPhaseResultString = await myFinanceMathClient.RateByNumericalSparkassenformel(
            totalSavingsCash,
            totalSavingsStocks,
            totalSavingsMetals,
            lifeAssumptions.cashGrowthRate,
            lifeAssumptions.stocksGrowthRate,
            lifeAssumptions.metalsGrowthRate,
            rentStartAmount,
            ageStopWork,
            lifeAssumptions.ageRentStart);

        var stopWorkPhaseResultJson = JsonDocument.Parse(stopWorkPhaseResultString);
        Console.WriteLine();

        // UI updates

        resultRows = protocolWriter.Protocol;

        await DrawBarChart(barChart, protocolWriter.Protocol, lifeAssumptions);
        await DrawLineChart(lineChart, protocolWriter.Protocol, lifeAssumptions);

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }
}