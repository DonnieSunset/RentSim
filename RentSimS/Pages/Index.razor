@page "/"
@using System.Globalization;
@using Domain;
@using Finance;
@using Finance.Facades;
@using SavingPhaseService.Contracts;
@inject IHttpClientFactory ClientFactory

<Divider DividerType="DividerType.TextContent" Text="Ages" />

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Current Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Stop Work Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Rent Start Age:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">End Age:</FieldLabel>

 </Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageCurrent" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@ageStopWork" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageRentStart" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.ageEnd" onchange="@Recalc" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Savings Phase"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Asset Class:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Initial Savings:</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Interest Rate (%):</FieldLabel>
    <FieldLabel ColumnSize="ColumnSize.Is2">Monthly Save Amount:</FieldLabel>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cash" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cashGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.cashSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Metals:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metals" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metalsGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.metalsSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>
<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocks" Step="1000" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocksGrowthRate" Step="1" onchange="@Recalc" /> </FieldBody>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="false" @bind-Value="@lifeAssumptions.stocksSaveAmountPerMonth" Step="100" onchange="@Recalc" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Field Horizontal="true" ColumnSize="ColumnSize.Is10">
    <FieldLabel ColumnSize="ColumnSize.Is2">Total Savings at @ageStopWork:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is2"> <NumericEdit ReadOnly="true" @bind-Value="@totalSavings" /> </FieldBody>
</Field>

@code{
    SavingPhaseFacade savingPhaseFacade;

    LifeAssumptions lifeAssumptions = new();
    int ageStopWork = 63;
    decimal totalSavings;

    protected override async Task OnInitializedAsync()
    {
        savingPhaseFacade = new SavingPhaseFacade(ClientFactory);
        await Recalc();
    }

    public string BeautifyToCurrenctWith0Decimals(decimal? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }

    private async Task Recalc()
    {
        var totalSavingsCash = await savingPhaseFacade.GetSavingPhaseResultAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.cash, lifeAssumptions.cashGrowthRate, lifeAssumptions.cashSaveAmountPerMonth);
        var totalSavingsMetals = await savingPhaseFacade.GetSavingPhaseResultAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.metals, lifeAssumptions.metalsGrowthRate, lifeAssumptions.metalsSaveAmountPerMonth);
        var totalSavingsStocks = await savingPhaseFacade.GetSavingPhaseResultAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.stocks, lifeAssumptions.stocksGrowthRate, lifeAssumptions.stocksSaveAmountPerMonth);

        totalSavings = totalSavingsCash + totalSavingsMetals + totalSavingsStocks;

        var blubb1 = await savingPhaseFacade.GetSavingPhaseSimulationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.cash, lifeAssumptions.cashGrowthRate, lifeAssumptions.cashSaveAmountPerMonth);
        var blubb2 = await savingPhaseFacade.GetSavingPhaseSimulationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.metals, lifeAssumptions.metalsGrowthRate, lifeAssumptions.metalsSaveAmountPerMonth);
        var blubb3 = await savingPhaseFacade.GetSavingPhaseSimulationAsync(lifeAssumptions.ageCurrent, ageStopWork, lifeAssumptions.stocks, lifeAssumptions.stocksGrowthRate, lifeAssumptions.stocksSaveAmountPerMonth);
    }
}
