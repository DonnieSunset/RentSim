@using Processing;
@using Processing.Assets;
@using Processing.Withdrawal; 
@using System.Globalization;

@page "/"

<Divider DividerType="DividerType.TextContent" Text="Timeline Data"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="int" @bind-Value="@FieldAgeCurrent" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stop Work Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="int" @bind-Value="@FieldAgeStopWork" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rent Start Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="int" @bind-Value="@FieldAgeRentStart" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="int" @bind-Value="@FieldAgeEnd" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1"></FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
    </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Interest Rate Type:</FieldLabel>
    <FieldBody>
        <RadioGroup ColumnSize="ColumnSize.Is1" TValue="InterestRateType" Name="InterestRateType" Buttons="true" Color="Color.Light" CheckedValue="@interestRateType" CheckedValueChanged="@OnInterestRateCheckedValueChanged">
            <Radio TValue="InterestRateType" Value="@InterestRateType.Relativ">Relativ</Radio>
            <Radio TValue="InterestRateType" Value="@InterestRateType.Konform">Konform</Radio>
        </RadioGroup>
    </FieldBody>

</Field>

<Divider DividerType="DividerType.TextContent" Text="Initial Assets"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldCash" DelayTextOnKeyPress="false" Step="1000" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Cash Interest Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldCashGrowthRate" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Cash Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldCashSaveAmount" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldStocks" DelayTextOnKeyPress="false" Step="1000" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks Growth Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldStocksGrowthRate" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Stocks Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldStocksSaveAmount" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldMetals" DelayTextOnKeyPress="false" Step="1000" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Metals Growth Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldMetalsGrowthRate" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Metals Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit @bind-Value="@FieldMetalsSaveAmount" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Rent Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent (work until Current Age):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="int" @bind-Value="@FieldNetStateRentFromCurrentAge" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent (work until Rent Start Age):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="int" @bind-Value="@FieldNetStateRentFromRentStartAge" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Total Savings at @FieldAgeStopWork</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsTotalSavingStopWorkAge" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent (work until @FieldAgeStopWork):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsNetStateRent" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net Rate (@FieldAgeStopWork - @FieldAgeRentStart):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsRatePhaseStopWork" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net Rate (@FieldAgeRentStart - @FieldAgeEnd):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsRatePhaseRent" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>



<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<Button Clicked="@(async () => await LoaderDefault())">LoadDefault</Button>

<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="double" />
    </Column>
    <Column ColumnSize="ColumnSize.Is4">
        @*<BarChart @ref="barChart" TItem="double" OptionsObject="@dataBarChartOptions" />*@
        @* <BarChart @ref="barChart" TItem="double" OptionsJsonString="@myStackedOptions" />*@
        <BarChart @ref="barChart" TItem="double" OptionsObject="@myScales" />
    </Column>
</Row>





<DataGrid TItem="ResultRow"
          Data="@resultRows"
          ReadData="@OnReadData"
          TotalItems="@totalRows">
    <DataGridCommandColumn TItem="ResultRow" />
    <DataGridColumn TItem="ResultRow" Field="@nameof(ResultRow.age)" Caption="Age" />

    <DataGridColumn TItem="ResultRow" Field="total.yearBegin" Caption="total.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.total.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="stocks.yearBegin" Caption="stocks.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.yearBegin" Caption="cash.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.yearBegin" Caption="metals.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.yearBegin)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="ResultRow" Field="total.invests" Caption="total.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.total.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="stocks.invests" Caption="stocks.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.invests" Caption="cash.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.invests" Caption="metals.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.invests)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="ResultRow" Field="stocks.growth" Caption="stocks.growth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.growth)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.growth" Caption="cash.growth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.growth)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.growth" Caption="metals.growth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.growth)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="ResultRow" Field="total.yearEnd" Caption="total.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.total.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="stocks.yearEnd" Caption="stocks.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.yearEnd" Caption="cash.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.yearEnd" Caption="metals.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.yearEnd)) </DisplayTemplate>
    </DataGridColumn>

</DataGrid>


@code
{
    int totalRows;

    async Task OnReadData(DataGridReadDataEventArgs<ResultRow> e)
    {
        totalRows = resultRows.Count; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();

        await Task.Delay(0);
    }
}


@functions {

    async Task LoaderDefault()
    {
        FieldAgeCurrent = 41;
        FieldAgeStopWork = 60;
        FieldAgeRentStart = 67;
        FieldAgeEnd = 80;

        interestRateType = InterestRateType.Relativ;

        FieldStocks = 60000;
        FieldStocksGrowthRate = 7;
        FieldStocksSaveAmount = 700;

        FieldCash = 60000;
        FieldCashGrowthRate = 0;
        FieldCashSaveAmount = 350;

        FieldMetals = 20000;
        FieldMetalsGrowthRate = 1;
        FieldMetalsSaveAmount = 0;

        //https://www.finanzrechner.org/sonstige-rechner/rentenbesteuerungsrechner/
        FieldNetStateRentFromCurrentAge = 762;
        FieldNetStateRentFromRentStartAge = 2015;

        FieldResultsTotalSavingStopWorkAge = "0";
        FieldResultsNetStateRent = "0";
        FieldResultsRatePhaseRent = "0";
        FieldResultsRatePhaseStopWork = "0";

        await Task.Delay(0);
    }

    public string BeautifyToCurrenctWith2Decimals(double? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", num);
    }

    public string BeautifyToCurrenctWith0Decimals(double? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }

}

@code{
    InterestRateType interestRateType = InterestRateType.Relativ;

    async void OnInterestRateCheckedValueChanged(InterestRateType value)
    {
        interestRateType = value;
        await HandleRedraw();
    }
}

@code{
    LineChart<double> lineChart;
    BarChart<double> barChart;
    BarChartOptions dataBarChartOptions;
    Scales myScales;
    ResultSet resultSet;
    List<ResultRow> resultRows = new List<ResultRow>();
    Portfolio portfolio = null;

    string myStackedOptions = "{\"scales\": {\"xAxes\": [{\"stacked\": true}],\"yAxes\": [{\"stacked\": true}]}}";

    int FieldAgeCurrent;
    int FieldAgeStopWork;
    int FieldAgeRentStart;
    int FieldAgeEnd;


    int FieldStocks;
    int FieldStocksGrowthRate;
    int FieldStocksSaveAmount;

    int FieldCash;
    int FieldCashGrowthRate;
    int FieldCashSaveAmount;

    int FieldMetals;
    int FieldMetalsGrowthRate;
    int FieldMetalsSaveAmount;

    int FieldNetStateRentFromCurrentAge;
    int FieldNetStateRentFromRentStartAge;

    string FieldResultsTotalSavingStopWorkAge;
    string FieldResultsNetStateRent;
    string FieldResultsRatePhaseRent;
    string FieldResultsRatePhaseStopWork;

    async Task HandleRedraw()
    {
        Input input = new Input();
        input.ageCurrent = FieldAgeCurrent;
        input.ageStopWork = FieldAgeStopWork;
        input.ageRentStart = FieldAgeRentStart;
        input.ageEnd = FieldAgeEnd;

        input.interestRateType = interestRateType;

        input.stocks = FieldStocks;
        input.stocksGrowthRate = FieldStocksGrowthRate;
        input.stocksMonthlyInvestAmount = FieldStocksSaveAmount;

        input.cash = FieldCash;
        input.cashGrowthRate = FieldCashGrowthRate;
        input.cashMonthlyInvestAmount = FieldCashSaveAmount;

        input.metals = FieldMetals;
        input.metalsGrowthRate = FieldMetalsGrowthRate;
        input.metalsMonthlyInvestAmount = FieldMetalsSaveAmount;

        input.netStateRentFromCurrentAge = FieldNetStateRentFromCurrentAge;
        input.netStateRentFromRentStartAge = FieldNetStateRentFromRentStartAge;

        portfolio = new Portfolio(input);
        portfolio.Process();

        //results
        int index = FieldAgeStopWork - FieldAgeCurrent;
        double TotalSavingStopWorkAge = portfolio.Total.protocol[index].yearBegin;  //resultRows[index].total.yearBegin;
        FieldResultsTotalSavingStopWorkAge = BeautifyToCurrenctWith0Decimals(TotalSavingStopWorkAge);
        double approxStopWorkAgeNetRent = RentSimMath.RentStopWorkAgeApproximation(FieldAgeCurrent, FieldAgeStopWork, FieldAgeRentStart, FieldNetStateRentFromCurrentAge, FieldNetStateRentFromRentStartAge);
        FieldResultsNetStateRent = BeautifyToCurrenctWith0Decimals(approxStopWorkAgeNetRent);

        //double averageGrowthRate = portfolio.GetAverageGrowthRate();
        //(double ratePhaseRent, double ratePhaseStopWork) = SparkassenFormel.CalculatePayoutRateWithRent(
        //    startCapital: TotalSavingStopWorkAge,
        //    yearsStopWorkPhase: FieldAgeRentStart - FieldAgeStopWork,
        //    yearsRentPhase: FieldAgeEnd - FieldAgeRentStart,
        //    interestRate: averageGrowthRate,
        //    endCapital: 0,
        //    rent: approxStopWorkAgeNetRent,
        //    calcTaxes: portfolio.WithdrawalStrategy.SimulateTaxesAtWithdrawal
        //);


        double ratePhaseStopWork = portfolio.WithdrawalStrategy.GetWithdrawalAmount(input.ageStopWork);
        double ratePhaseRent = ratePhaseStopWork - (approxStopWorkAgeNetRent * 12);

        FieldResultsRatePhaseRent = BeautifyToCurrenctWith0Decimals(ratePhaseRent/12d);
        FieldResultsRatePhaseStopWork = BeautifyToCurrenctWith0Decimals(ratePhaseStopWork/12d);

        portfolio.Process2();

        resultSet = new ResultSet(input, portfolio.Cash, portfolio.Stocks, portfolio.Metals, portfolio.Total);
        resultRows = resultSet.ProcessAssets();
        //resultRows = rSet.ProcessAssets();//.OrderByDescending(x => x.age).ToList();


        //todo: add end amount of last result row to show it in chart

        string[] labels = Enumerable.Range(input.ageCurrent, input.ageRentStart - input.ageCurrent + 1)
            .ToArray()
            .Select(x => x.ToString())
            .ToArray();

        LineChartDataset<double> data = new LineChartDataset<double>
        {
            BackgroundColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 0.5f) },
            Label = "Total",
            BorderColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 1f) },
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { },
            //Data = resultRows.Select(x => x.total.yearBegin).ToList(),
            Data = portfolio.Total.protocol.Select(x => x.yearBegin).ToList(),
        };

        BarChartDataset<double> dataBarChartCash = new BarChartDataset<double>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 0.5f), portfolio.Cash.protocol.Count).ToList<string>(),
            Label = "Cash",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 1f), portfolio.Cash.protocol.Count).ToList<string>(),
            Data = portfolio.Cash.protocol.Select(x => x.yearBegin).ToList(),
        };

        BarChartDataset<double> dataBarChartStocks = new BarChartDataset<double>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 0.5f), portfolio.Stocks.protocol.Count).ToList<string>(),
            Label = "Stocks",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 1f), portfolio.Stocks.protocol.Count).ToList<string>(),
            Data = portfolio.Stocks.protocol.Select(x => x.yearBegin).ToList(),
        };
        //todo: hier wirklich yearBegin oder sollte es yearEnd sein?

        BarChartDataset<double> dataBarChartMetals = new BarChartDataset<double>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 215, 0, 0.5f), portfolio.Metals.protocol.Count).ToList<string>(),
            Label = "Metals",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 215, 0, 1f), portfolio.Metals.protocol.Count).ToList<string>(),
            Data = portfolio.Metals.protocol.Select(x => x.yearBegin).ToList(),
        };


        dataBarChartOptions = new BarChartOptions()
        {
            Scales = new Scales
            {
                //XAxes = new List<Axis> { new Axis { Stacked = true} },
                //YAxes = new List<Axis> { new Axis { Stacked = true} },
                XAxes = new List<Axis>() { new Axis { Stacked = true } },
                YAxes = new List<Axis>() { new Axis { Stacked = true } },
            },
        };

        myScales = new Scales
        {
            //XAxes = new List<Axis> { new Axis { Stacked = true} },
            //YAxes = new List<Axis> { new Axis { Stacked = true} },
            XAxes = new List<Axis>() { new Axis { Stacked = true } },
            YAxes = new List<Axis>() { new Axis { Stacked = true } },
        };

        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate(labels, data);

        await barChart.Clear();
        await barChart.AddLabelsDatasetsAndUpdate(labels, dataBarChartCash, dataBarChartStocks, dataBarChartMetals);

    }
}