@using System.Globalization;
@using Domain;
@using Finance.Results
@using Protocol;
@*@using Strategy;*@
@*@using Portfolio;*@
@using Finance;
@using System.Collections.ObjectModel

@page "/"

<Divider DividerType="DividerType.TextContent" Text="Timeline Data"></Divider>

<Field Horizontal="true">

    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <InputAge @bind-Value="@lifeAssumptions.ageCurrent" Lower="0" @bind-Upper="@Field_Result_AgeStopWork" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stop Work Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@Field_Result_AgeStopWork"/> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rent Start Age:</FieldLabel>
    <InputAge @bind-Value="@lifeAssumptions.ageRentStart" @bind-Lower="Field_Result_AgeStopWork" @bind-Upper="@lifeAssumptions.ageEnd" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <InputAge @bind-Value="@lifeAssumptions.ageEnd" @bind-Lower="lifeAssumptions.ageRentStart" Upper="100" Redraw="@HandleRedraw"/>

 </Field>

<Divider DividerType="DividerType.TextContent" Text="Rent Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent pM (work until @lifeAssumptions.ageCurrent):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.netStateRentFromCurrentAge_perMonth" DelayTextOnKeyPress="false" Step=100m onchange="@HandleRedraw"/> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent pM (work until @lifeAssumptions.ageRentStart):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.netStateRentFromRentStartAge_perMonth" DelayTextOnKeyPress="false" Step=100m onchange="@HandleRedraw"/> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent pM (work until @Field_Result_AgeStopWork):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldNetRentAgeFromStopWork_perMonth" DelayTextOnKeyPress="false"/> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Need Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Minimum Needs now pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.needsCurrentAgeMinimal_perMonth" onchange="@HandleRedraw" DelayTextOnKeyPress="false" Step=100m /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Comfort Needs now pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.needsCurrentAgeComfort_perMonth" onchange="@HandleRedraw" DelayTextOnKeyPress="false" Step=100m /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Inflation Rate:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="double" @bind-Value="@lifeAssumptions.inflationRate" onchange="@HandleRedraw" DelayTextOnKeyPress="false" Step=0.01m /> </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Minimum Needs Stop Work pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsStopWorkMinimum_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Comfort Needs Stop Work pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsStopWorkComfort_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Minimum Needs Rent Start pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsRentStartMinimum_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Comfort Needs Rent Start pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsRentStartComfort_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

 <Divider DividerType="DividerType.TextContent" Text="Savings Phase"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <InputAmount @bind-Value="@lifeAssumptions.cash" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Cash Interest Rate (%):</FieldLabel>
    <InputGrowthrate @bind-Value="@lifeAssumptions.cashGrowthRate" Redraw="@HandleRedraw"/> 

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Cash Save Amount:</FieldLabel>
    <InputSaverate @bind-Value="@lifeAssumptions.cashSaveAmountPerMonth" Redraw="@HandleRedraw"/>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <InputAmount @bind-Value="@lifeAssumptions.stocks" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks Growth Rate (%):</FieldLabel>
    <InputGrowthrate @bind-Value="@lifeAssumptions.stocksGrowthRate" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Stocks Save Amount:</FieldLabel>
    <InputSaverate @bind-Value="@lifeAssumptions.stocksSaveAmountPerMonth" Redraw="@HandleRedraw"/>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals:</FieldLabel>
    <InputAmount @bind-Value="@lifeAssumptions.metals" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Metals Growth Rate (%):</FieldLabel>
    <InputGrowthrate @bind-Value="@lifeAssumptions.metalsGrowthRate" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Metals Save Amount:</FieldLabel>
    <InputSaverate @bind-Value="@lifeAssumptions.metalsSaveAmountPerMonth" Redraw="@HandleRedraw"/> 

    <FieldLabel ColumnSize="ColumnSize.Is1">Total Savings at @Field_Result_AgeStopWork</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_SavingPhaseResults_TotalSavingStopWorkAge" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Overplus amount</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_SavingPhaseResults_OverAmount" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>



















@*//you cannot do bind-value and @onchange same time
https://stackoverflow.com/questions/60660371/why-would-the-onchange-event-of-inputtext-not-fire-in-blazor
*@














@*<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net Rate (@lifeAssumptions.ageStopWork - @lifeAssumptions.ageRentStart):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsRatePhaseStopWork" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net Rate (@lifeAssumptions.ageRentStart - @lifeAssumptions.ageEnd):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsRatePhaseRent" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>*@





<Divider DividerType="DividerType.TextContent" Text="Rent Phase"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Savings Needed: </FieldLabel>

    <FieldLabel ColumnSize="ColumnSize.Is1">Cash </FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_SavingsNeededCash" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_SavingsNeededStocks" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Total</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_SavingsNeededTotal" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Good Case: </FieldLabel>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Cash pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_GoodCase_RateCash"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Stocks pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_GoodCase_RateStocks"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Taxes pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_GoodCase_Taxes"  DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Bad Case: </FieldLabel>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Cash pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_BadCase_RateCash"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Stocks pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_BadCase_RateStocks"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Taxes pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_BadCase_Taxes"  DelayTextOnKeyPress="false" /> </FieldBody>
</Field>



@*<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<Button Clicked="@(async () => await LoaderDefault())">LoadDefault</Button>*@

<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="double"/>
    </Column>
   <Column ColumnSize="ColumnSize.Is4">
        <BarChart @ref="barChart" TItem="decimal" OptionsObject="@dataBarChartOptions" />
    </Column>

</Row>





<DataGrid TItem="ResultRow"
          Narrow="true"
          Responsive="true"
          Data="@resultRows"
          ReadData="@OnReadData"
          Resizable="true"
          TotalItems="@totalRows">
    <DataGridCommandColumn TItem="ResultRow" />
    
    <DataGridColumn TItem="ResultRow" Field="age" Caption="Age" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End/>
    <DataGridColumn TItem="ResultRow" Field="TotalYearBegin" Caption="Total YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
    <DataGridColumn TItem="ResultRow" Field="cashDeposits" Caption="Cash Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.cashDeposits))</DisplayTemplate></DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="stocksDeposits" Caption="Stocks Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.stocksDeposits)) </DisplayTemplate></DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metalsDeposits" Caption="Metals Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.metalsDeposits)) </DisplayTemplate></DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="TotalDeposits" Caption="Total Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
    <DataGridColumn TItem="ResultRow" Field="TotalInterests" Caption="Total Interests" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
    <DataGridColumn TItem="ResultRow" Field="TotalTaxes" Caption="Total Taxes" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
    <DataGridColumn TItem="ResultRow" Field="TotalYearEnd" Caption="Total YearEnd" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
    
    
    @*<DataGridColumn TItem="ResultRow" Field="deposits" Caption="Deposits" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.deposits)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="interests" Caption="Interests" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.interests)) </DisplayTemplate>
    </DataGridColumn>*@
    @*<DataGridColumn TItem="ResultRow" Field="cash.yearBegin" Caption="cash.yearBegin" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.yearBegin" Caption="metals.yearBegin" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.yearBegin)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="ResultRow" Field="total.invests" Caption="total.invests" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.total.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="stocks.invests" Caption="stocks.invests" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.invests" Caption="cash.invests" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.invests" Caption="metals.invests" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.invests)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="ResultRow" Field="stocks.growth" Caption="stocks.growth" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.growth)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.growth" Caption="cash.growth" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.growth)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.growth" Caption="metals.growth" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.growth)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="ResultRow" Field="total.yearEnd" Caption="total.yearEnd" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.total.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="stocks.yearEnd" Caption="stocks.yearEnd" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.stocks.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="cash.yearEnd" Caption="cash.yearEnd" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.cash.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="ResultRow" Field="metals.yearEnd" Caption="metals.yearEnd" Sortable="false" TextAlignment=TextAlignment.End>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as ResultRow)?.metals.yearEnd)) </DisplayTemplate>
    </DataGridColumn>*@

</DataGrid>


@code
{
    int totalRows;

    async Task OnReadData(DataGridReadDataEventArgs<ResultRow> e)
    {
        // this is used to tell datagrid how many items are available so that pagination will work
        totalRows = resultRows != null
            ? resultRows.Count()
            : 0;

        // always call StateHasChanged!
        StateHasChanged();

        await Task.Delay(0);
    }

    public string BeautifyToCurrenctWith2Decimals(decimal? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", num);
    }

    public string BeautifyListToCurrencyWith0Decimals(List<decimal>? decimals)
    {
        return decimals == null
            ? string.Empty
            : string.Join(Environment.NewLine, decimals.Select(x => string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", x)));
    }

    public string BeautifyToCurrenctWith0Decimals(decimal? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }
}




@code{
    LineChart<double> lineChart;
    BarChart<decimal> barChart;
    BarChartOptions dataBarChartOptions;
    LineChartOptions dataLineChartOptions;
    //InputAge ageInputFields;
    ChartScales myScales;
    //ResultSet resultSet;
    IEnumerable<ResultRow> resultRows;
    //Portfolio portfolio = null;

    //MarketAssumptions marketAssumptions = new();
    LifeAssumptions lifeAssumptions = new();
    //NetRentResultData myNetRentResultData = new();
    SavingPhaseResult mySavingPhaseResult = new();
    RentPhaseResult myRentPhaseResult = new();
    StateRentResult myStateRentResult = new();
    LaterNeedsResult myLaterNeedsResult = new();
    StopWorkPhaseResult myStopWorkPhaseResult = new();
    PhaseIntegratorResult myPhaseIntegratorResult = new();

    //Inflation myRentStartInflation;


    string myStackedOptions = "{\"scales\": {\"xAxes\": [{\"stacked\": true}],\"yAxes\": [{\"stacked\": true}]}}";

    //int FieldAgeCurrent;
    //int FieldAgeStopWork;
    //int FieldAgeRentStart;
    //int FieldAgeEnd;


    //int FieldStocks;
    //int FieldStocksGrowthRate;
    //int FieldStocksSaveAmount;

    //int FieldCash;
    //int FieldCashGrowthRate;
    //int FieldCashSaveAmount;

    //int FieldMetals;
    //int FieldMetalsGrowthRate;
    //int FieldMetalsSaveAmount;

    //int FieldNetStateRentFromCurrentAge;
    //int FieldNetStateRentFromRentStartAge;

    //int FieldNeedsNowMinimum;
    //int FieldNeedsNowComfort;
    //int FieldInflationRate;

    //string Field_RentPhaseResult_RateCash {
    //    get
    //    { 
    //        return BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rate_Cash);    
    //    }
    //    set { }
    //}






    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // RESULT DATA
    string Field_RentPhaseResult_GoodCase_RateCash;
    string Field_RentPhaseResult_GoodCase_RateStocks;
    string Field_RentPhaseResult_GoodCase_Taxes;
    string Field_RentPhaseResult_BadCase_RateCash;
    string Field_RentPhaseResult_BadCase_RateStocks;
    string Field_RentPhaseResult_BadCase_Taxes;
    string Field_RentPhaseResult_SavingsNeededCash;
    string Field_RentPhaseResult_SavingsNeededStocks;
    string Field_RentPhaseResult_SavingsNeededTotal;

    string Field_NeedsStopWorkMinimum_perMonth;
    string Field_NeedsStopWorkComfort_perMonth;
    string Field_NeedsRentStartMinimum_perMonth;
    string Field_NeedsRentStartComfort_perMonth;

    string Field_SavingPhaseResults_TotalSavingStopWorkAge;
    string Field_SavingPhaseResults_OverAmount;
    string FieldResultsNetStateRent;
    string FieldResultsRatePhaseRent;
    string FieldResultsRatePhaseStopWork;

    string FieldNetRentAgeFromStopWork_perMonth;
    int Field_Result_AgeStopWork;

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Debug: SH OnAfterRender");

        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        if(firstRender)
        {
            Console.WriteLine("Debug: SH firstRender");

            // Do work to load page data and set properties
            HandleRedraw();
        }
    }

    //async Task HandleRedraw()
    public void HandleRedraw()
    {
        Console.WriteLine("Debug: SH HandleRedraw");

        myPhaseIntegratorResult = PhaseIntegrator.Doit(lifeAssumptions);
        myStateRentResult = myPhaseIntegratorResult.stateRentResult;
        myLaterNeedsResult = myPhaseIntegratorResult.laterNeedsResult;
        mySavingPhaseResult = myPhaseIntegratorResult.savingPhaseResult;
        myRentPhaseResult = myPhaseIntegratorResult.rentPhaseResult;
        myStopWorkPhaseResult = myPhaseIntegratorResult.stopWorkPhaseResult;

        IProtocolWriter protocolWriter = new MemoryProtocolWriter();

        //myStopWorkPhaseResult.Print();
        //myRentPhaseResult.Print();

        SavingPhaseCalculator.Simulate(
            lifeAssumptions.ageCurrent,
            myPhaseIntegratorResult.ageStopWork,
            lifeAssumptions.cash,
            lifeAssumptions.cashGrowthRate,
            lifeAssumptions.cashSaveAmountPerMonth,
            lifeAssumptions.stocks,
            lifeAssumptions.stocksGrowthRate,
            lifeAssumptions.stocksSaveAmountPerMonth,
            lifeAssumptions.metals,
            lifeAssumptions.metalsGrowthRate,
            lifeAssumptions.metalsSaveAmountPerMonth,
            protocolWriter
        );

        SavingPhaseCalculator.RebalanceForStopWorkPhase(
            myPhaseIntegratorResult.ageStopWork-1, // <-- todo: what happens here if currentAge==stopWorkAge?
            myPhaseIntegratorResult.overAmount,
            myStopWorkPhaseResult.neededCash,
            myStopWorkPhaseResult.neededStocks,
            protocolWriter
            );

        StopWorkPhaseCalculator.Simulate(
            myStopWorkPhaseResult.ageStopWork,
            lifeAssumptions.ageRentStart,
            myStopWorkPhaseResult.neededCash,
            myStopWorkPhaseResult.neededStocks,
            myRentPhaseResult.rate_Cash,
            myRentPhaseResult.rateStocks_ExcludedTaxes_GoodCase,
            myRentPhaseResult.rateStocks_ExcludedTaxes_BadCase,
            lifeAssumptions.rentPhase_InterestRate_Cash,
            lifeAssumptions.rentPhase_InterestRate_Stocks_GoodCase,
            lifeAssumptions.rentPhase_InterestRate_Stocks_BadCase,
            lifeAssumptions.rentPhase_CrashFactor_Stocks_BadCase,
            lifeAssumptions.taxFactor_Stocks,
            myPhaseIntegratorResult.overAmount,
            protocolWriter
        );

        RentPhaseCalculator.Simulate(
            lifeAssumptions.ageRentStart,
            lifeAssumptions.ageEnd,
            myRentPhaseResult.total_Cash,
            myRentPhaseResult.total_Stocks,
            myRentPhaseResult.rate_Cash,
            myRentPhaseResult.rateStocks_ExcludedTaxes_GoodCase,
            lifeAssumptions.rentPhase_InterestRate_Stocks_GoodCase,
            lifeAssumptions.rentPhase_InterestRate_Cash,
            myRentPhaseResult.taxesPerYear_GoodCase,
            protocolWriter
        );

        resultRows = protocolWriter.Protocol;
        ResultRowValidator.ValidateAll(resultRows, lifeAssumptions.ageCurrent, lifeAssumptions.ageEnd);




        // RESULTS
        // !! this part must come AFTER all calculations are done, otherwise the UI-bindings wont work !!
        Field_Result_AgeStopWork = myPhaseIntegratorResult.ageStopWork;
        //Field_Result_SavingPhase_PverAmount = myPhaseIntegratorResult.overAmount;
        //ageInputFields.ValueChanged.InvokeAsync().Wait();


        Field_SavingPhaseResults_TotalSavingStopWorkAge = BeautifyToCurrenctWith0Decimals(mySavingPhaseResult.SavingsTotal);
        Field_SavingPhaseResults_OverAmount = BeautifyToCurrenctWith0Decimals(myPhaseIntegratorResult.overAmount);

        Field_RentPhaseResult_GoodCase_RateCash = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rate_Cash);
        Field_RentPhaseResult_GoodCase_RateStocks = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rateStocks_ExcludedTaxes_GoodCase);
        Field_RentPhaseResult_GoodCase_Taxes = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.taxesPerYear_GoodCase);
        Field_RentPhaseResult_BadCase_RateCash = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rate_Cash);
        Field_RentPhaseResult_BadCase_RateStocks = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rateStocks_ExcludedTaxes_BadCase);
        Field_RentPhaseResult_BadCase_Taxes = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.taxesPerYear_BadCase);
        Field_RentPhaseResult_SavingsNeededCash = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.total_Cash);
        Field_RentPhaseResult_SavingsNeededStocks = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.total_Stocks);
        Field_RentPhaseResult_SavingsNeededTotal = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.total_Cash + myRentPhaseResult.total_Stocks);

        Field_NeedsStopWorkMinimum_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsMinimum_AgeStopWork_WithInflation_PerMonth);
        Field_NeedsStopWorkComfort_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsComfort_AgeStopWork_WithInflation_PerMonth);
        Field_NeedsRentStartMinimum_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsMinimum_AgeRentStart_WithInflation_PerMonth);
        Field_NeedsRentStartComfort_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsComfort_AgeRentStart_WithInflation_PerMonth);
        
        FieldNetRentAgeFromStopWork_perMonth = BeautifyToCurrenctWith0Decimals(myStateRentResult.assumedStateRent_FromStopWorkAge_PerMonth);


        //results
        //int index = FieldAgeStopWork - FieldAgeCurrent;
        //double TotalSavingStopWorkAge = portfolio.Total.Protocol[index].yearBegin;  //resultRows[index].total.yearBegin;

        //double approxStopWorkAgeNetRent = RentSimMath.RentStopWorkAgeApproximation(FieldAgeCurrent, FieldAgeStopWork, FieldAgeRentStart, FieldNetStateRentFromCurrentAge, FieldNetStateRentFromRentStartAge);
        //FieldResultsNetStateRent = BeautifyToCurrenctWith0Decimals(approxStopWorkAgeNetRent);

        //double averageGrowthRate = portfolio.GetAverageGrowthRate();
        //(double ratePhaseRent, double ratePhaseStopWork) = SparkassenFormel.CalculatePayoutRateWithRent(
        //    startCapital: TotalSavingStopWorkAge,
        //    yearsStopWorkPhase: FieldAgeRentStart - FieldAgeStopWork,
        //    yearsRentPhase: FieldAgeEnd - FieldAgeRentStart,
        //    interestRate: averageGrowthRate,
        //    endCapital: 0,
        //    rent: approxStopWorkAgeNetRent,
        //    calcTaxes: portfolio.WithdrawalStrategy.SimulateTaxesAtWithdrawal
        //);

        //portfolio.WithdrawalStrategy.Calculate();
        //var withdrawalResults = portfolio.WithdrawalStrategy.GetResults();
        //double ratePhaseStopWork = withdrawalResults.Total.RateStopWorkNet;
        //double ratePhaseRent = withdrawalResults.Total.RateRentStartNet;

        //FieldResultsRatePhaseRent = BeautifyToCurrenctWith0Decimals(ratePhaseRent/12d);
        //FieldResultsRatePhaseStopWork = BeautifyToCurrenctWith0Decimals(ratePhaseStopWork/12d);


        //resultSet = new ResultSet(input, portfolio.Cash, portfolio.Stocks, portfolio.Metals, portfolio.Total);
        //resultRows = resultSet.ProcessAssets();
        //resultRows = rSet.ProcessAssets();//.OrderByDescending(x => x.age).ToList();


        //todo: add end amount of last result row to show it in chart

        string[] labels = Enumerable.Range(lifeAssumptions.ageCurrent, lifeAssumptions.ageEnd - lifeAssumptions.ageCurrent)
            .Select(x => x.ToString())
            .ToArray();

        //LineChartDataset<double> data = new LineChartDataset<double>
        //{
        //    BackgroundColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 0.5f) },
        //    Label = "Total",
        //    BorderColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 1f) },
        //    Fill = true,
        //    PointRadius = 2,
        //    BorderDash = new List<int> { },
        //    //Data = resultRows.Select(x => x.total.yearBegin).ToList(),
        //    Data = portfolio.Total.Protocol.Select(x => x.yearBegin).ToList(),
        //};

        BarChartDataset<decimal> dataBarChartCash = new BarChartDataset<decimal>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 0.5f), resultRows.Count()).ToList<string>(),
            Label = "Cash",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 1f), resultRows.Count()).ToList<string>(),
            Data = resultRows.Select(x => x.cashYearEnd).ToList(),
        };

        BarChartDataset<decimal> dataBarChartStocks = new BarChartDataset<decimal>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 0.5f), resultRows.Count()).ToList<string>(),
            Label = "Stocks",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 1f), resultRows.Count()).ToList<string>(),
            Data = resultRows.Select(x => x.stocksYearEnd).ToList(),
        };

        BarChartDataset<decimal> dataBarChartMetals = new BarChartDataset<decimal>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 215, 0, 0.5f), resultRows.Count()).ToList<string>(),
            Label = "Metals",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 1f), resultRows.Count()).ToList<string>(),
            Data = resultRows.Select(x => x.metalsYearEnd).ToList(),
        };

        BarChartOptions dataBarChartOptions = new BarChartOptions()
        {
            Scales = new ChartScales
            {
                X = new ChartAxis { Stacked = true },
                Y = new ChartAxis { Stacked = true }
            },
        };

        //dataLineChartOptions = new LineChartOptions()
        //{
        //    Scales = new ChartScales
        //    {
        //        X = new ChartAxis { Stacked = true },
        //        Y = new ChartAxis { Stacked = true }

        //    },
        //};

        //myScales = new ChartScales
        //{
        //    X = new ChartAxis { Stacked = true },
        //    Y = new ChartAxis { Stacked = true }
        //};

        //await lineChart.Clear();
        //await lineChart.AddLabelsDatasetsAndUpdate(labels, data);

        if (barChart != null)
        {
            barChart.Clear();
            barChart.AddLabelsDatasetsAndUpdate(labels, dataBarChartCash, dataBarChartStocks, dataBarChartMetals);
        }
    }
}