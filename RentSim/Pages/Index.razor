@using Processing;
@using System.Globalization;

@page "/"

<Divider DividerType="DividerType.TextContent" Text="Timeline Data"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @bind-Text="@FieldAgeCurrent" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">StopWork Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @bind-Text="@FieldAgeStopWork" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">RentStart Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1"></FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
    </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Interest Rate Type:</FieldLabel>
    <FieldBody>
        <RadioGroup ColumnSize="ColumnSize.Is1" TValue="InterestRateType" Name="InterestRateType" Buttons="true" Color="Color.Light" CheckedValueChanged="@OnInterestRateCheckedValueChanged">
            <Radio TValue="InterestRateType" Value="@InterestRateType.Relativ">Relativ</Radio>
            <Radio TValue="InterestRateType" Value="@InterestRateType.Konform">Konform</Radio>
        </RadioGroup>
    </FieldBody>

</Field>

<Divider DividerType="DividerType.TextContent" Text="Initial Assets"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" @bind-Text="@FieldCash" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash Interest Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldCashGrowthRate" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Cash Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldCashSaveAmount" />
    </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" @bind-Text="@FieldStocks" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks Growth Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldStocksGrowthRate" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Stocks Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldStocksSaveAmount" />
    </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" @bind-Text="@FieldMetals" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals Growth Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldMetalsGrowthRate" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Metals Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldMetalsSaveAmount" />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Rent Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Gross State Rent (-> arbeiten bis renteneintrittsalter):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">StopWork Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">RentStart Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<Button Clicked="@(async () => await LoaderDefault())">LoadDefault</Button>

<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="double" />
    </Column>
    <Column ColumnSize="ColumnSize.Is4">
        @*<BarChart @ref="barChart" TItem="double" OptionsObject="@dataBarChartOptions" />*@
       @* <BarChart @ref="barChart" TItem="double" OptionsJsonString="@myStackedOptions" />*@
        <BarChart @ref="barChart" TItem="double" OptionsObject="@myScales" />
    </Column>
</Row>





<DataGrid TItem="RentSimResultRow"
          Data="@resultRows"
          ReadData="@OnReadData"
          TotalItems="@totalRows">
    <DataGridCommandColumn TItem="RentSimResultRow" />
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.age)" Caption="Age" />

    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.total.yearBegin)" Caption="total.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.total.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.stocks.yearBegin)" Caption="stocks.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.stocks.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.cash.yearBegin)" Caption="cash.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.cash.yearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.metals.yearBegin)" Caption="metals.yearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.metals.yearBegin)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.total.invests)" Caption="total.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.total.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.stocks.invests)" Caption="stocks.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.stocks.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.cash.invests)" Caption="cash.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.cash.invests)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.metals.invests)" Caption="metals.invests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.metals.invests)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.stocks.growth)" Caption="stocks.growth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.stocks.growth)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.cash.growth)" Caption="cash.growth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.cash.growth)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.metals.growth)" Caption="metals.growth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.metals.growth)) </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.total.yearEnd)" Caption="total.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.total.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.stocks.yearEnd)" Caption="stocks.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.stocks.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.cash.yearEnd)" Caption="cash.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.cash.yearEnd)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RentSimResultRow" Field="@nameof(RentSimResultRow.metals.yearEnd)" Caption="metals.yearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrenctWith0Decimals((context as RentSimResultRow)?.metals.yearEnd)) </DisplayTemplate>
    </DataGridColumn>

</DataGrid>

@code
{
    int totalRows;

    async Task OnReadData(DataGridReadDataEventArgs<RentSimResultRow> e)
    {
        totalRows = resultRows.Count; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();

        await Task.Delay(0);
    }
}


@functions {

    async Task LoaderDefault()
    {
        FieldAgeCurrent = "41";
        FieldAgeStopWork = "60";

        interestRateType = InterestRateType.Relativ;

        FieldStocks = "60000";
        FieldStocksGrowthRate = "7";
        FieldStocksSaveAmount = "700";

        FieldCash = "60000";
        FieldCashGrowthRate = "0";
        FieldCashSaveAmount = "350";

        FieldMetals = "20000";
        FieldMetalsGrowthRate = "1";
        FieldMetalsSaveAmount = "0";

        await Task.Delay(0);
    }

    public string BeautifyToCurrenctWith2Decimals(double? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", num);
    }

    public string BeautifyToCurrenctWith0Decimals(double? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }

}

@code{
    InterestRateType interestRateType;

    async void OnInterestRateCheckedValueChanged(InterestRateType value)
    {
        interestRateType = value;
        await HandleRedraw();
    }
}

@code{
    LineChart<double> lineChart;
    BarChart<double> barChart;
    BarChartOptions dataBarChartOptions;
    Scales myScales;
    ResultSet rSet;
    List<RentSimResultRow> resultRows = new List<RentSimResultRow>();

    //string FieldRefCash;
    string myStackedOptions = "{\"scales\": {\"xAxes\": [{\"stacked\": true}],\"yAxes\": [{\"stacked\": true}]}}";

    string FieldAgeCurrent;
    string FieldAgeStopWork;



    string FieldStocks;
    string FieldStocksGrowthRate;
    string FieldStocksSaveAmount;

    string FieldCash;
    string FieldCashGrowthRate;
    string FieldCashSaveAmount;

    string FieldMetals;
    string FieldMetalsGrowthRate;
    string FieldMetalsSaveAmount;

    async Task HandleRedraw()
    {
        //Labels.SetValue(fieldRefCash, 0);
        //StateContainer.Property = "1236";

        Input input = new Input();
        input.ageCurrent = Int32.Parse(FieldAgeCurrent);
        input.ageStopWork = Int32.Parse(FieldAgeStopWork);

        input.interestRateType = interestRateType;

        input.stocks = Int32.Parse(FieldStocks);
        input.stocksGrowthRate = Int32.Parse(FieldStocksGrowthRate);
        input.stocksMonthlyInvestAmount = Int32.Parse(FieldStocksSaveAmount);

        input.cash = Int32.Parse(FieldCash);
        input.cashGrowthRate = Int32.Parse(FieldCashGrowthRate);
        input.cashMonthlyInvestAmount = Int32.Parse(FieldCashSaveAmount);

        input.metals = Int32.Parse(FieldMetals);
        input.metalsGrowthRate = Int32.Parse(FieldMetalsGrowthRate);
        input.metalsMonthlyInvestAmount = Int32.Parse(FieldMetalsSaveAmount);

        rSet = new ResultSet(input);
        resultRows = rSet.ProcessAssets();//.OrderByDescending(x => x.age).ToList();

        //todo: add end amount of last result row to show it in chart

        string[] labels = Enumerable.Range(input.ageCurrent, input.ageStopWork - input.ageCurrent + 1)
            .ToArray()
            .Select(x => x.ToString())
            .ToArray(); ;

        LineChartDataset<double> data = new LineChartDataset<double>
        {
            BackgroundColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 0.5f) },
            Label = "Total",
            BorderColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 1f) },
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { },
            Data = resultRows.Select(x => x.total.yearBegin).ToList(),
        };

        BarChartDataset<double> dataBarChartCash = new BarChartDataset<double>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 0.5f), resultRows.Count).ToList<string>(),
            Label = "Cash",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 1f), resultRows.Count).ToList<string>(),
            Data = resultRows.Select(x => x.cash.yearBegin).ToList(),
        };

        BarChartDataset<double> dataBarChartStocks = new BarChartDataset<double>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 0.5f), resultRows.Count).ToList<string>(),
            Label = "Stocks",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 1f), resultRows.Count).ToList<string>(),
            Data = resultRows.Select(x => x.stocks.yearBegin).ToList(),
        };
        //todo: hier wirklich yearBegin oder sollte es yearEnd sein?

        BarChartDataset<double> dataBarChartMetals = new BarChartDataset<double>
        {
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 215, 0, 0.5f), resultRows.Count).ToList<string>(),
            Label = "Metals",
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 215, 0, 1f), resultRows.Count).ToList<string>(),
            Data = resultRows.Select(x => x.metals.yearBegin).ToList(),
        };


        dataBarChartOptions = new BarChartOptions()
        {
            Scales = new Scales {
                //XAxes = new List<Axis> { new Axis { Stacked = true} },
                //YAxes = new List<Axis> { new Axis { Stacked = true} },
                XAxes = new List<Axis>() { new Axis { Stacked = true } },
                YAxes = new List<Axis>() { new Axis { Stacked = true } },
            },
        };

        myScales = new Scales
        {
            //XAxes = new List<Axis> { new Axis { Stacked = true} },
            //YAxes = new List<Axis> { new Axis { Stacked = true} },
            XAxes = new List<Axis>() { new Axis { Stacked = true } },
            YAxes = new List<Axis>() { new Axis { Stacked = true } },
        };

        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate(labels, data);

        await barChart.Clear();
        await barChart.AddLabelsDatasetsAndUpdate(labels, dataBarChartCash, dataBarChartStocks, dataBarChartMetals);

    }
}