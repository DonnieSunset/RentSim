@using Processing;

@page "/"

<Divider DividerType="DividerType.Dotted" Text="Timeline Data"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @bind-Text="@FieldAgeCurrent" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">StopWork Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @bind-Text="@FieldAgeStopWork"  />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">RentStart Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.Dotted" Text="Initial Assets"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash Interest Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Cash Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" />
    </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" @bind-Text="@FieldStocks" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks Interest Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldStocksInterestRate" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Stocks Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldStocksSaveAmount"/>
    </FieldBody>
</Field>

<Divider DividerType="DividerType.Dotted" Text="Rent Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Gross State Rent (-> arbeiten bis renteneintrittsalter):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">StopWork Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">RentStart Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.Dotted"></Divider>

<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<Button Clicked="@(async () => await LoaderDefault())">LoadDefault</Button>

<LineChart @ref="lineChart" TItem="double"/>


@functions {

    async Task LoaderDefault()
    {
        FieldAgeCurrent = "41";
        FieldAgeStopWork = "60";
        FieldStocks = "60000";
        FieldStocksInterestRate = "7";
        FieldStocksSaveAmount = "700";

        //FieldEndAge.Text = "2021";
        //RentStartAge = "777";


        //await InvokeAsync(StateHasChanged);

        //HandleRedraw();

        //FieldRefCash.Text = "2000";

        await Task.Delay(0);
    }
}

@code{
    LineChart<double> lineChart;

    //string FieldRefCash;

    string FieldAgeCurrent;
    string FieldAgeStopWork;
    string FieldStocks;
    string FieldStocksInterestRate;
    string FieldStocksSaveAmount;


    //void OnChangeHandler(ChangeEventArgs e)
    //{
    //    // FieldEndAge.Text = e.Value.ToString();

    //}

    //string fieldRefCash = "1999";


    //protected override async Task OnInitializedAsync()
    //{
    //    FieldRefCash.Text = "2000";
    //    await Task.Delay(0);
    //}



    async Task HandleRedraw()
    {
        //Labels.SetValue(fieldRefCash, 0);
        //StateContainer.Property = "1236";

        Input input = new Input();
        input.ageCurrent = Int32.Parse(FieldAgeCurrent);
        input.ageStopWork = Int32.Parse(FieldAgeStopWork);
        input.stocks = Int32.Parse(FieldStocks);
        input.stocksInterestRate = Int32.Parse(FieldStocksInterestRate);
        input.stocksSaveAmount = Int32.Parse(FieldStocksSaveAmount);

        ResultSet rSet = new ResultSet();
        var result = rSet.Process(input);



        string[] labels = Enumerable.Range(input.ageCurrent, input.ageStopWork - input.ageCurrent + 1)
            .ToArray()
            .Select(x => x.ToString())
            .ToArray(); ;

        LineChartDataset<double> data = new LineChartDataset<double>
        {
            Label = "Blubb",
            Data = result.Select(x => x.stocksYearBegin).ToList(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { },
        };

        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate(labels, data);
    }

    //LineChartDataset<double> GetLineChartDataset()
    //{
    //    return new LineChartDataset<double>
    //    {
    //        Label = "# of randoms",
    //        Data = RandomizeData(),
    //        BackgroundColor = backgroundColors,
    //        BorderColor = borderColors,
    //        Fill = true,
    //        PointRadius = 2,
    //        BorderDash = new List<int> { }
    //    };
    //}

    //string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    //string[] Labels = Enumerable.Range(start, end - start).ToArray();
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    //List<double> RandomizeData()
    //{
    //    var r = new Random(DateTime.Now.Millisecond);

    //    return new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
    //}
}