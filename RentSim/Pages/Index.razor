@using Processing;
@using System.Globalization;

@page "/"

<Divider DividerType="DividerType.Dotted" Text="Timeline Data"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @bind-Text="@FieldAgeCurrent" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">StopWork Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @bind-Text="@FieldAgeStopWork" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">RentStart Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.Dotted" Text="Initial Assets"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash Interest Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Cash Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" />
    </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" MaskType="MaskType.RegEx" EditMask="^[0-9]+$" @bind-Text="@FieldStocks" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks Interest Rate (%):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldStocksGrowthRate" />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Stocks Save Amount:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit @onkeypress="@(async () => await HandleRedraw())" @bind-Text="@FieldStocksSaveAmount" />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.Dotted" Text="Rent Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Gross State Rent (-> arbeiten bis renteneintrittsalter):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">StopWork Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">RentStart Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1">
        <TextEdit />
    </FieldBody>
</Field>

<Divider DividerType="DividerType.Dotted"></Divider>

<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<Button Clicked="@(async () => await LoaderDefault())">LoadDefault</Button>

<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="double" />
    </Column>
</Row>

<DataGrid TItem="Snapshot"
          Data="@snapshots"
          ReadData="@OnReadData"
          TotalItems="@totalSnapshots">
    <DataGridCommandColumn TItem="Snapshot" />
    <DataGridColumn TItem="Snapshot" Field="@nameof(Snapshot.age)" Caption="Age" Sortable="false" />
    <DataGridColumn TItem="Snapshot" Field="@nameof(Snapshot.stocksYearBegin)" Caption="stocksYearBegin" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrency((context as Snapshot)?.stocksYearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Snapshot" Field="@nameof(Snapshot.stocksInvests)" Caption="stocksInvests" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrency((context as Snapshot)?.stocksYearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Snapshot" Field="@nameof(Snapshot.stocksGrowth)" Caption="stocksGrowth" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrency((context as Snapshot)?.stocksYearBegin)) </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Snapshot" Field="@nameof(Snapshot.stocksYearEnd)" Caption="stocksYearEnd" Sortable="false" TextAlignment=TextAlignment.Right>
        <DisplayTemplate> @(BeautifyToCurrency((context as Snapshot)?.stocksYearBegin)) </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

@code
{
    int totalSnapshots;

    async Task OnReadData(DataGridReadDataEventArgs<Snapshot> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        //var response = await Http.GetJsonAsync<Employee[]>($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        //employeeList = response.Data; // an actual data for the current page
        totalSnapshots = snapshots.Count; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();

        await Task.Delay(0);
    }
}


@functions {

    async Task LoaderDefault()
    {
        FieldAgeCurrent = "41";
        FieldAgeStopWork = "60";
        FieldStocks = "60000";
        FieldStocksGrowthRate = "7";
        FieldStocksSaveAmount = "700";

        await Task.Delay(0);
    }

    public string BeautifyToCurrency(double? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", num);
    }
}

@code{
    LineChart<double> lineChart;
    ResultSet rSet = new ResultSet();
    List<Snapshot> snapshots = new List<Snapshot>();

    //string FieldRefCash;

    string FieldAgeCurrent;
    string FieldAgeStopWork;
    string FieldStocks;
    string FieldStocksGrowthRate;
    string FieldStocksSaveAmount;

    async Task HandleRedraw()
    {
        //Labels.SetValue(fieldRefCash, 0);
        //StateContainer.Property = "1236";

        Input input = new Input();
        input.ageCurrent = Int32.Parse(FieldAgeCurrent);
        input.ageStopWork = Int32.Parse(FieldAgeStopWork);
        input.stocks = Int32.Parse(FieldStocks);
        input.stocksGrowthRate = Int32.Parse(FieldStocksGrowthRate);
        input.stocksMonthlyInvestAmount = Int32.Parse(FieldStocksSaveAmount);


        snapshots = rSet.Process(input);



        string[] labels = Enumerable.Range(input.ageCurrent, input.ageStopWork - input.ageCurrent + 1)
            .ToArray()
            .Select(x => x.ToString())
            .ToArray(); ;

        LineChartDataset<double> data = new LineChartDataset<double>
        {
            Label = "Blubb",
            Data = snapshots.Select(x => x.stocksYearBegin).ToList(),
            BackgroundColor = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f) },
            BorderColor = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f) },
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { },
        };

        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate(labels, data);
    }
}