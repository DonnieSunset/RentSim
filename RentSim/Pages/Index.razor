@using System.Globalization;
@using Domain;
@using Finance.Results
@using Protocol;
@using Finance;
@using System.Collections.ObjectModel

@page "/"

<Divider DividerType="DividerType.TextContent" Text="Timeline Data"></Divider>

<Field Horizontal="true">

    <FieldLabel ColumnSize="ColumnSize.Is1">Current Age:</FieldLabel>
    <InputAge @bind-Value="@lifeAssumptions.ageCurrent" Lower="0" @bind-Upper="@Field_Result_AgeStopWork" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stop Work Age:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit ReadOnly="true" @bind-Value="@Field_Result_AgeStopWork"/> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rent Start Age:</FieldLabel>
    <InputAge @bind-Value="@lifeAssumptions.ageRentStart" @bind-Lower="Field_Result_AgeStopWork" @bind-Upper="@lifeAssumptions.ageEnd" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">End Age:</FieldLabel>
    <InputAge @bind-Value="@lifeAssumptions.ageEnd" @bind-Lower="lifeAssumptions.ageRentStart" Upper="100" Redraw="@HandleRedraw"/>

 </Field>

<Divider DividerType="DividerType.TextContent" Text="Rent Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent pM (work until @lifeAssumptions.ageCurrent):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.netStateRentFromCurrentAge_perMonth" DelayTextOnKeyPress="false" Step=100m onchange="@HandleRedraw"/> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent pM (work until @lifeAssumptions.ageRentStart):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.netStateRentFromRentStartAge_perMonth" DelayTextOnKeyPress="false" Step=100m onchange="@HandleRedraw"/> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net State Rent pM (work until @Field_Result_AgeStopWork):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldNetRentAgeFromStopWork_perMonth" DelayTextOnKeyPress="false"/> </FieldBody>
</Field>

<Divider DividerType="DividerType.TextContent" Text="Need Approximations"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Minimum Needs now pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.needsCurrentAgeMinimal_perMonth" onchange="@HandleRedraw" DelayTextOnKeyPress="false" Step=100m /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Comfort Needs now pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="decimal" @bind-Value="@lifeAssumptions.needsCurrentAgeComfort_perMonth" onchange="@HandleRedraw" DelayTextOnKeyPress="false" Step=100m /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Inflation Rate:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <NumericEdit TValue="double" @bind-Value="@lifeAssumptions.inflationRate" onchange="@HandleRedraw" DelayTextOnKeyPress="false" Step=0.01m /> </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Minimum Needs Stop Work pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsStopWorkMinimum_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Comfort Needs Stop Work pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsStopWorkComfort_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Minimum Needs Rent Start pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsRentStartMinimum_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Comfort Needs Rent Start pM:</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true"  @bind-Text="@Field_NeedsRentStartComfort_perMonth" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

 <Divider DividerType="DividerType.TextContent" Text="Savings Phase"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Cash:</FieldLabel>
    <InputAmount @bind-Value="@lifeAssumptions.cash" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Cash Interest Rate (%):</FieldLabel>
    <InputGrowthrate @bind-Value="@lifeAssumptions.cashGrowthRate" Redraw="@HandleRedraw"/> 

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Cash Save Amount:</FieldLabel>
    <InputSaverate @bind-Value="@lifeAssumptions.cashSaveAmountPerMonth" Redraw="@HandleRedraw"/>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks:</FieldLabel>
    <InputAmount @bind-Value="@lifeAssumptions.stocks" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks Growth Rate (%):</FieldLabel>
    <InputGrowthrate @bind-Value="@lifeAssumptions.stocksGrowthRate" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Stocks Save Amount:</FieldLabel>
    <InputSaverate @bind-Value="@lifeAssumptions.stocksSaveAmountPerMonth" Redraw="@HandleRedraw"/>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Metals:</FieldLabel>
    <InputAmount @bind-Value="@lifeAssumptions.metals" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Metals Growth Rate (%):</FieldLabel>
    <InputGrowthrate @bind-Value="@lifeAssumptions.metalsGrowthRate" Redraw="@HandleRedraw"/>

    <FieldLabel ColumnSize="ColumnSize.Is1">Monthly Metals Save Amount:</FieldLabel>
    <InputSaverate @bind-Value="@lifeAssumptions.metalsSaveAmountPerMonth" Redraw="@HandleRedraw"/> 

    <FieldLabel ColumnSize="ColumnSize.Is1">Total Savings at @Field_Result_AgeStopWork</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_SavingPhaseResults_TotalSavingStopWorkAge" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Overplus amount</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_SavingPhaseResults_OverAmount" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>



















@*//you cannot do bind-value and @onchange same time
https://stackoverflow.com/questions/60660371/why-would-the-onchange-event-of-inputtext-not-fire-in-blazor
*@














@*<Divider DividerType="DividerType.TextContent" Text="Results"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Net Rate (@lifeAssumptions.ageStopWork - @lifeAssumptions.ageRentStart):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsRatePhaseStopWork" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Net Rate (@lifeAssumptions.ageRentStart - @lifeAssumptions.ageEnd):</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@FieldResultsRatePhaseRent" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>*@





<Divider DividerType="DividerType.TextContent" Text="Rent Phase"></Divider>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Savings Needed: </FieldLabel>

    <FieldLabel ColumnSize="ColumnSize.Is1">Cash </FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_SavingsNeededCash" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Stocks</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_SavingsNeededStocks" DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Total</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_SavingsNeededTotal" DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Good Case: </FieldLabel>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Cash pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_GoodCase_RateCash"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Stocks pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_GoodCase_RateStocks"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Taxes pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_GoodCase_Taxes"  DelayTextOnKeyPress="false" /> </FieldBody>
</Field>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is1">Bad Case: </FieldLabel>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Cash pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_BadCase_RateCash"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Rate Stocks pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_BadCase_RateStocks"  DelayTextOnKeyPress="false" /> </FieldBody>

    <FieldLabel ColumnSize="ColumnSize.Is1">Taxes pY</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is1"> <TextEdit ReadOnly="true" @bind-Text="@Field_RentPhaseResult_BadCase_Taxes"  DelayTextOnKeyPress="false" /> </FieldBody>
</Field>



@*<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<Button Clicked="@(async () => await LoaderDefault())">LoadDefault</Button>*@

<Row>
    <Column ColumnSize="ColumnSize.Is4">
        <LineChart @ref="lineChart" TItem="decimal"/>
    </Column>
   <Column ColumnSize="ColumnSize.Is4">
        <BarChart @ref="barChart" TItem="decimal" />
    </Column>
</Row>



<Row>
    <Column ColumnSize="ColumnSize.Is5">
        <DataGrid TItem="ResultRow"
              ColumnSize="ColumnSize.Is1"
              Narrow="true"
              Responsive="true"
              Data="@resultRowsGoodCase"
              ReadData="@OnReadData"
              Resizable="true"
              TotalItems="@totalRows">
            <DataGridCommandColumn TItem="ResultRow" />
    
            <DataGridColumn TItem="ResultRow" Field="age" Caption="Age" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End/>
            <DataGridColumn TItem="ResultRow" Field="TotalYearBegin" Caption="Total YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="cashDeposits" Caption="Cash Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.cashDeposits))</DisplayTemplate></DataGridColumn>
            <DataGridColumn TItem="ResultRow" Field="stocksDeposits" Caption="Stocks Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.stocksDeposits)) </DisplayTemplate></DataGridColumn>
            <DataGridColumn TItem="ResultRow" Field="metalsDeposits" Caption="Metals Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.metalsDeposits)) </DisplayTemplate></DataGridColumn>
            <DataGridColumn TItem="ResultRow" Field="TotalDeposits" Caption="Total Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="TotalInterests" Caption="Total Interests" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="TotalTaxes" Caption="Total Taxes" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="TotalYearEnd" Caption="Total YearEnd" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
        </DataGrid>
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
    </Column>
    <Column ColumnSize="ColumnSize.Is5">
        <DataGrid TItem="ResultRow"
              ColumnSize="ColumnSize.Is1"
              Narrow="true"
              Responsive="true"
              Data="@resultRowsBadCase"
              ReadData="@OnReadData"
              Resizable="true"
              TotalItems="@totalRows">
            <DataGridCommandColumn TItem="ResultRow" />
    
            <DataGridColumn TItem="ResultRow" Field="age" Caption="Age" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End/>
            <DataGridColumn TItem="ResultRow" Field="TotalYearBegin" Caption="Total YearBegin" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="cashDeposits" Caption="Cash Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.cashDeposits))</DisplayTemplate></DataGridColumn>
            <DataGridColumn TItem="ResultRow" Field="stocksDeposits" Caption="Stocks Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.stocksDeposits)) </DisplayTemplate></DataGridColumn>
            <DataGridColumn TItem="ResultRow" Field="metalsDeposits" Caption="Metals Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End ><DisplayTemplate> @(BeautifyListToCurrencyWith0Decimals((context as ResultRow)?.metalsDeposits)) </DisplayTemplate></DataGridColumn>
            <DataGridColumn TItem="ResultRow" Field="TotalDeposits" Caption="Total Deposits" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="TotalInterests" Caption="Total Interests" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="TotalTaxes" Caption="Total Taxes" Sortable="false" TextAlignment=TextAlignment.End HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
            <DataGridColumn TItem="ResultRow" Field="TotalYearEnd" Caption="Total YearEnd" Sortable="false" TextAlignment=TextAlignment.End  HeaderTextAlignment=TextAlignment.End DisplayFormat="{0,12:C0}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")"/>
        </DataGrid>
    </Column>
</Row>


@code
{
    int totalRows;

    async Task OnReadData(DataGridReadDataEventArgs<ResultRow> e)
    {
        // this is used to tell datagrid how many items are available so that pagination will work
        totalRows = resultRowsGoodCase != null
            ? resultRowsGoodCase.Count()
            : 0;

        // always call StateHasChanged!
        StateHasChanged();

        await Task.Delay(0);
    }

    public string BeautifyToCurrenctWith2Decimals(decimal? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C2}", num);
    }

    public string BeautifyListToCurrencyWith0Decimals(List<decimal>? decimals)
    {
        return decimals == null
            ? string.Empty
            : string.Join(Environment.NewLine, decimals.Select(x => string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", x)));
    }

    public string BeautifyToCurrenctWith0Decimals(decimal? num)
    {
        return string.Format(CultureInfo.CreateSpecificCulture("de-DE"), "{0,12:C0}", num);
    }
}




@code{
    LineChart<decimal> lineChart;
    BarChart<decimal> barChart;
    BarChartOptions dataBarChartOptions;
    LineChartOptions dataLineChartOptions;
    //InputAge ageInputFields;
    ChartScales myScales;
    //ResultSet resultSet;
    IEnumerable<ResultRow> resultRowsGoodCase;
    IEnumerable<ResultRow> resultRowsBadCase;
    //Portfolio portfolio = null;

    //MarketAssumptions marketAssumptions = new();
    LifeAssumptions lifeAssumptions = new();
    //NetRentResultData myNetRentResultData = new();
    SavingPhaseResult mySavingPhaseResult = new();
    RentPhaseResult myRentPhaseResult = new();
    StateRentResult myStateRentResult = new();
    LaterNeedsResult myLaterNeedsResult = new();
    StopWorkPhaseResult myStopWorkPhaseResult_goodCase = new();
    StopWorkPhaseResult myStopWorkPhaseResult_badCase = new();
    PhaseIntegratorResult myPhaseIntegratorResult = new();

    //Inflation myRentStartInflation;


    string myStackedOptions = "{\"scales\": {\"xAxes\": [{\"stacked\": true}],\"yAxes\": [{\"stacked\": true}]}}";

    //int FieldAgeCurrent;
    //int FieldAgeStopWork;
    //int FieldAgeRentStart;
    //int FieldAgeEnd;


    //int FieldStocks;
    //int FieldStocksGrowthRate;
    //int FieldStocksSaveAmount;

    //int FieldCash;
    //int FieldCashGrowthRate;
    //int FieldCashSaveAmount;

    //int FieldMetals;
    //int FieldMetalsGrowthRate;
    //int FieldMetalsSaveAmount;

    //int FieldNetStateRentFromCurrentAge;
    //int FieldNetStateRentFromRentStartAge;

    //int FieldNeedsNowMinimum;
    //int FieldNeedsNowComfort;
    //int FieldInflationRate;

    //string Field_RentPhaseResult_RateCash {
    //    get
    //    { 
    //        return BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rate_Cash);    
    //    }
    //    set { }
    //}






    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // RESULT DATA
    string Field_RentPhaseResult_GoodCase_RateCash;
    string Field_RentPhaseResult_GoodCase_RateStocks;
    string Field_RentPhaseResult_GoodCase_Taxes;
    string Field_RentPhaseResult_BadCase_RateCash;
    string Field_RentPhaseResult_BadCase_RateStocks;
    string Field_RentPhaseResult_BadCase_Taxes;
    string Field_RentPhaseResult_SavingsNeededCash;
    string Field_RentPhaseResult_SavingsNeededStocks;
    string Field_RentPhaseResult_SavingsNeededTotal;

    string Field_NeedsStopWorkMinimum_perMonth;
    string Field_NeedsStopWorkComfort_perMonth;
    string Field_NeedsRentStartMinimum_perMonth;
    string Field_NeedsRentStartComfort_perMonth;

    string Field_SavingPhaseResults_TotalSavingStopWorkAge;
    string Field_SavingPhaseResults_OverAmount;
    string FieldResultsNetStateRent;
    string FieldResultsRatePhaseRent;
    string FieldResultsRatePhaseStopWork;

    string FieldNetRentAgeFromStopWork_perMonth;
    int Field_Result_AgeStopWork;

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Debug: SH OnAfterRender");

        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        if(firstRender)
        {
            Console.WriteLine("Debug: SH firstRender");

            // Do work to load page data and set properties
            HandleRedraw();
        }
    }

    public void HandleRedraw()
    {
        myPhaseIntegratorResult = PhaseIntegrator.Calculate(lifeAssumptions);

        IProtocolWriter protocolWriterGoodCase = new MemoryProtocolWriter();
        IProtocolWriter protocolWriterBadCase = new MemoryProtocolWriter();
        PhaseIntegrator.Simulate(
            lifeAssumptions,
            myPhaseIntegratorResult,
            protocolWriterGoodCase,
            protocolWriterBadCase
        );

        resultRowsGoodCase = protocolWriterGoodCase.Protocol;
        //ResultRowValidator.ValidateAll(resultRowsGoodCase, lifeAssumptions.ageCurrent, myPhaseIntegratorResult.ageStopWork, lifeAssumptions.ageEnd, lifeAssumptions.taxFactor_Stocks);

        resultRowsBadCase = protocolWriterBadCase.Protocol;
        //ResultRowValidator.ValidateAll(resultRowsBadCase, lifeAssumptions.ageCurrent, myPhaseIntegratorResult.ageStopWork, lifeAssumptions.ageEnd, lifeAssumptions.taxFactor_Stocks);


        // RESULTS
        // !! this part must come AFTER all calculations are done, otherwise the UI-bindings wont work !!

        myStateRentResult = myPhaseIntegratorResult.stateRentResult;
        myLaterNeedsResult = myPhaseIntegratorResult.laterNeedsResult;
        mySavingPhaseResult = myPhaseIntegratorResult.savingPhaseResult;
        myRentPhaseResult = myPhaseIntegratorResult.rentPhaseResult;
        myStopWorkPhaseResult_goodCase = myPhaseIntegratorResult.stopWorkPhaseResult_goodCase;

        Field_Result_AgeStopWork = myPhaseIntegratorResult.ageStopWork;
        Field_SavingPhaseResults_TotalSavingStopWorkAge = BeautifyToCurrenctWith0Decimals(mySavingPhaseResult.SavingsTotal);
        Field_SavingPhaseResults_OverAmount = BeautifyToCurrenctWith0Decimals(myPhaseIntegratorResult.overAmount_goodCase);
        Field_RentPhaseResult_GoodCase_RateCash = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rate_Cash);
        Field_RentPhaseResult_GoodCase_RateStocks = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rateStocks_ExcludedTaxes_GoodCase);
        Field_RentPhaseResult_GoodCase_Taxes = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.taxesPerYear_GoodCase);
        Field_RentPhaseResult_BadCase_RateCash = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rate_Cash);
        Field_RentPhaseResult_BadCase_RateStocks = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.rateStocks_ExcludedTaxes_BadCase);
        Field_RentPhaseResult_BadCase_Taxes = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.taxesPerYear_BadCase);
        Field_RentPhaseResult_SavingsNeededCash = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.neededPhaseBegin_Cash);
        Field_RentPhaseResult_SavingsNeededStocks = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.neededPhaseBegin_Stocks);
        Field_RentPhaseResult_SavingsNeededTotal = BeautifyToCurrenctWith0Decimals(myRentPhaseResult.neededPhaseBegin_Cash + myRentPhaseResult.neededPhaseBegin_Stocks);
        Field_NeedsStopWorkMinimum_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsMinimum_AgeStopWork_WithInflation_PerMonth);
        Field_NeedsStopWorkComfort_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsComfort_AgeStopWork_WithInflation_PerMonth);
        Field_NeedsRentStartMinimum_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsMinimum_AgeRentStart_WithInflation_PerMonth);
        Field_NeedsRentStartComfort_perMonth = BeautifyToCurrenctWith0Decimals(myLaterNeedsResult.needsComfort_AgeRentStart_WithInflation_PerMonth);
        FieldNetRentAgeFromStopWork_perMonth = BeautifyToCurrenctWith0Decimals(myStateRentResult.assumedStateRent_FromStopWorkAge_PerMonth);

        //results
        //int index = FieldAgeStopWork - FieldAgeCurrent;
        //double TotalSavingStopWorkAge = portfolio.Total.Protocol[index].yearBegin;  //resultRows[index].total.yearBegin;

        //double approxStopWorkAgeNetRent = RentSimMath.RentStopWorkAgeApproximation(FieldAgeCurrent, FieldAgeStopWork, FieldAgeRentStart, FieldNetStateRentFromCurrentAge, FieldNetStateRentFromRentStartAge);
        //FieldResultsNetStateRent = BeautifyToCurrenctWith0Decimals(approxStopWorkAgeNetRent);

        //double averageGrowthRate = portfolio.GetAverageGrowthRate();
        //(double ratePhaseRent, double ratePhaseStopWork) = SparkassenFormel.CalculatePayoutRateWithRent(
        //    startCapital: TotalSavingStopWorkAge,
        //    yearsStopWorkPhase: FieldAgeRentStart - FieldAgeStopWork,
        //    yearsRentPhase: FieldAgeEnd - FieldAgeRentStart,
        //    interestRate: averageGrowthRate,
        //    endCapital: 0,
        //    rent: approxStopWorkAgeNetRent,
        //    calcTaxes: portfolio.WithdrawalStrategy.SimulateTaxesAtWithdrawal
        //);

        //portfolio.WithdrawalStrategy.Calculate();
        //var withdrawalResults = portfolio.WithdrawalStrategy.GetResults();
        //double ratePhaseStopWork = withdrawalResults.Total.RateStopWorkNet;
        //double ratePhaseRent = withdrawalResults.Total.RateRentStartNet;

        //FieldResultsRatePhaseRent = BeautifyToCurrenctWith0Decimals(ratePhaseRent/12d);
        //FieldResultsRatePhaseStopWork = BeautifyToCurrenctWith0Decimals(ratePhaseStopWork/12d);


        //resultSet = new ResultSet(input, portfolio.Cash, portfolio.Stocks, portfolio.Metals, portfolio.Total);
        //resultRows = resultSet.ProcessAssets();
        //resultRows = rSet.ProcessAssets();//.OrderByDescending(x => x.age).ToList();


        //todo: add end amount of last result row to show it in chart

        string[] labels = Enumerable.Range(lifeAssumptions.ageCurrent, lifeAssumptions.ageEnd - lifeAssumptions.ageCurrent + 1)
            .Select(x => x.ToString())
            .ToArray();

        //LineChartDataset<double> data = new LineChartDataset<double>
        //{
        //    BackgroundColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 0.5f) },
        //    Label = "Total",
        //    BorderColor = new List<string> { ChartColor.FromRgba(51, 153, 102, 1f) },
        //    Fill = true,
        //    PointRadius = 2,
        //    BorderDash = new List<int> { },
        //    //Data = resultRows.Select(x => x.total.yearBegin).ToList(),
        //    Data = portfolio.Total.Protocol.Select(x => x.yearBegin).ToList(),
        //};

        BarChartDataset<decimal> dataBarChartCash = new BarChartDataset<decimal>
        {
            Label = "Cash",
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 0.5f), resultRowsGoodCase.Count()).ToList<string>(),
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 0, 0, 1f), resultRowsGoodCase.Count()).ToList<string>(),
            Data = resultRowsGoodCase
                    .Select(x => x.cashYearBegin)
                    .Append(resultRowsGoodCase.Last().cashYearEnd)
                    .ToList(),
        };

        BarChartDataset<decimal> dataBarChartStocks = new BarChartDataset<decimal>
        {
            Label = "Stocks",
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 0.5f), resultRowsGoodCase.Count()).ToList<string>(),
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 1f), resultRowsGoodCase.Count()).ToList<string>(),
            Data = resultRowsGoodCase.Select(x => x.stocksYearBegin)
                    .Append(resultRowsGoodCase.Last().stocksYearEnd)
                    .ToList(),
        };

        BarChartDataset<decimal> dataBarChartMetals = new BarChartDataset<decimal>
        {
            Label = "Metals",
            BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(255, 215, 0, 0.5f), resultRowsGoodCase.Count()).ToList<string>(),
            BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(0, 0, 255, 1f), resultRowsGoodCase.Count()).ToList<string>(),
            Data = resultRowsGoodCase.Select(x => x.metalsYearBegin)
                    .Append(resultRowsGoodCase.Last().metalsYearEnd)
                    .ToList(),
        };


        BarChartOptions dataBarChartOptions = new BarChartOptions()
        {
            Scales = new ChartScales
            {
                X = new ChartAxis { Stacked = false },
                Y = new ChartAxis { Stacked = false, BeginAtZero = true, Min=0 }
            },
        };

        if (barChart != null)
        {
            barChart.Clear();
            barChart.SetOptions(dataBarChartOptions);
            barChart.AddLabelsDatasetsAndUpdate(labels, dataBarChartCash, dataBarChartStocks, dataBarChartMetals);
        }










        LineChartOptions lineBarChartOptions = new LineChartOptions()
        {
            Scales = new ChartScales
            {
                X = new ChartAxis { Stacked = false },
                Y = new ChartAxis { Stacked = false, BeginAtZero = true, Min=0 }
            },
        };

        var goodCaseChartColorBG = ChartColor.FromRgba(100, 200, 50, 0.1f);
        var goodCaseChartColorFG = ChartColor.FromRgba(100, 200, 50, 1f);
        LineChartDataset<decimal> lineChartDataSet_goodCase = new LineChartDataset<decimal>
        {
            Label = "Total Good Case",
            Data = resultRowsGoodCase
                    .Select(x => x.TotalYearBegin)
                    .Append(resultRowsGoodCase.Last().TotalYearEnd)
                    .ToList(),
            BackgroundColor = Enumerable.Repeat<string>(goodCaseChartColorBG, resultRowsGoodCase.Count()).ToList<string>(),
            BorderColor = Enumerable.Repeat<string>(goodCaseChartColorFG, resultRowsGoodCase.Count()).ToList<string>(),
        };

        var badCaseChartColorBG = ChartColor.FromRgba(200, 0, 50, 0.1f);
        var badCaseChartColorFG = ChartColor.FromRgba(200, 0, 50, 1f);
        LineChartDataset<decimal> lineChartDataSet_badCase = new LineChartDataset<decimal>
        {
            Label = "Total Bad Case",
            Data = resultRowsBadCase
                    .Select(x => x.TotalYearBegin)
                    .Append(resultRowsBadCase.Last().TotalYearEnd)
                    .ToList(),
            BackgroundColor = Enumerable.Repeat<string>(badCaseChartColorBG, resultRowsGoodCase.Count()).ToList<string>(),
            BorderColor = Enumerable.Repeat<string>(badCaseChartColorFG, resultRowsGoodCase.Count()).ToList<string>(),
        };

        if (lineChart != null)
        {
            lineChart.Clear();
            lineChart.SetOptions(lineBarChartOptions);
            lineChart.AddLabelsDatasetsAndUpdate(labels, lineChartDataSet_goodCase, lineChartDataSet_badCase);
        }

        //todo: tests mit alters verification
        //todo: tests mit äquivalenzklassen
        //todo: scenario tests, z.b. was passiert wenn savings nicht für phases ausreichen
        //todo: massentests mit ä-daten
        //todo: resultrow verification: are taxes paid corrently
        //todo: im moment is noch ein fehler drin: das rebalancing nach der save phase berücksichtigt nicht die taxes beim verkauf von stocks!!
        //todo: replace all tax and interests calculation by Frac class
        //todo: check again all calculations of stocks market crash. normally factor is 0.5 so it doesnot matter is its used as factor or rate. but with 0.9 it can lead to wriong results.
    }
}